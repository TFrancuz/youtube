
UART-48091.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000042f  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000031c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007f  0000431c  0000031c  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000207  00802800  00802800  0000042f  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  0000042f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000460  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002de9  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002827  00000000  00000000  00003309  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000005af  00000000  00000000  00005b30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000148  00000000  00000000  000060e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000014cf  00000000  00000000  00006228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000344  00000000  00000000  000076f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000070  00000000  00000000  00007a3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   8:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
   c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  10:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  14:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  18:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  1c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  20:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  24:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  28:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  2c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  30:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  34:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  38:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  3c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  40:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  44:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  48:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  4c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  50:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  54:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  58:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  5c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  60:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  64:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  68:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  6c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  70:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  74:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  78:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  7c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  80:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  84:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  88:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  8c:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  90:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__bad_interrupt>
  94:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__vector_37>
  98:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_38>
  9c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__vector_39>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_clear_bss>:
  ac:	2a e2       	ldi	r18, 0x2A	; 42
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
  b6:	a7 30       	cpi	r26, 0x07	; 7
  b8:	b2 07       	cpc	r27, r18
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
  bc:	0e 94 46 01 	call	0x28c	; 0x28c <main>
  c0:	0c 94 8c 01 	jmp	0x318	; 0x318 <_exit>

000000c4 <__bad_interrupt>:
  c4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c8 <__vector_37>:
	{
		*ch = USART3.RXDATAL;	
		return true;
	}
	return false;				//Nie by³o znaku w buforze nadajnika
}
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
  da:	80 91 05 28 	lds	r24, 0x2805	; 0x802805 <RxBufferWriteIndex>
  de:	e8 2f       	mov	r30, r24
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	90 91 60 08 	lds	r25, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
  e6:	ea 5f       	subi	r30, 0xFA	; 250
  e8:	f7 4d       	sbci	r31, 0xD7	; 215
  ea:	90 83       	st	Z, r25
  ec:	8f 5f       	subi	r24, 0xFF	; 255
  ee:	80 93 05 28 	sts	0x2805, r24	; 0x802805 <RxBufferWriteIndex>
  f2:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <RxBufferCnt>
  f6:	8f 5f       	subi	r24, 0xFF	; 255
  f8:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <RxBufferCnt>
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	9f 91       	pop	r25
 102:	8f 91       	pop	r24
 104:	0f 90       	pop	r0
 106:	0f be       	out	0x3f, r0	; 63
 108:	0f 90       	pop	r0
 10a:	1f 90       	pop	r1
 10c:	18 95       	reti

0000010e <__vector_39>:
 10e:	1f 92       	push	r1
 110:	0f 92       	push	r0
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	0f 92       	push	r0
 116:	11 24       	eor	r1, r1
 118:	8f 93       	push	r24
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
 11e:	e4 e6       	ldi	r30, 0x64	; 100
 120:	f8 e0       	ldi	r31, 0x08	; 8
 122:	80 81       	ld	r24, Z
 124:	80 64       	ori	r24, 0x40	; 64
 126:	80 83       	st	Z, r24
 128:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <TxBufferCnt>
 12c:	88 23       	and	r24, r24
 12e:	91 f0       	breq	.+36     	; 0x154 <__vector_39+0x46>
 130:	e0 91 03 28 	lds	r30, 0x2803	; 0x802803 <TxBufferReadIndex>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	8e 0f       	add	r24, r30
 138:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <TxBufferReadIndex>
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	ea 5f       	subi	r30, 0xFA	; 250
 140:	f6 4d       	sbci	r31, 0xD6	; 214
 142:	80 81       	ld	r24, Z
 144:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
 148:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <TxBufferCnt>
 14c:	81 50       	subi	r24, 0x01	; 1
 14e:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <TxBufferCnt>
 152:	02 c0       	rjmp	.+4      	; 0x158 <__vector_39+0x4a>
 154:	10 92 06 2a 	sts	0x2A06, r1	; 0x802a06 <TxIntEn>
 158:	ff 91       	pop	r31
 15a:	ef 91       	pop	r30
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <__vector_38>:
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	8f 93       	push	r24
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
 178:	11 c0       	rjmp	.+34     	; 0x19c <__vector_38+0x34>
 17a:	e0 91 03 28 	lds	r30, 0x2803	; 0x802803 <TxBufferReadIndex>
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	8e 0f       	add	r24, r30
 182:	80 93 03 28 	sts	0x2803, r24	; 0x802803 <TxBufferReadIndex>
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	ea 5f       	subi	r30, 0xFA	; 250
 18a:	f6 4d       	sbci	r31, 0xD6	; 214
 18c:	80 81       	ld	r24, Z
 18e:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
 192:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <TxBufferCnt>
 196:	81 50       	subi	r24, 0x01	; 1
 198:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <TxBufferCnt>
 19c:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <TxBufferCnt>
 1a0:	88 23       	and	r24, r24
 1a2:	21 f0       	breq	.+8      	; 0x1ac <__vector_38+0x44>
 1a4:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7f4864>
 1a8:	85 fd       	sbrc	r24, 5
 1aa:	e7 cf       	rjmp	.-50     	; 0x17a <__vector_38+0x12>
 1ac:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <TxBufferCnt>
 1b0:	81 11       	cpse	r24, r1
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <__vector_38+0x56>
 1b4:	e5 e6       	ldi	r30, 0x65	; 101
 1b6:	f8 e0       	ldi	r31, 0x08	; 8
 1b8:	80 81       	ld	r24, Z
 1ba:	8f 7d       	andi	r24, 0xDF	; 223
 1bc:	80 83       	st	Z, r24
 1be:	ff 91       	pop	r31
 1c0:	ef 91       	pop	r30
 1c2:	8f 91       	pop	r24
 1c4:	0f 90       	pop	r0
 1c6:	0f be       	out	0x3f, r0	; 63
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <UART_Init>:
 1ce:	10 92 01 28 	sts	0x2801, r1	; 0x802801 <TxBufferWriteIndex>
 1d2:	10 92 03 28 	sts	0x2803, r1	; 0x802803 <TxBufferReadIndex>
 1d6:	10 92 02 28 	sts	0x2802, r1	; 0x802802 <TxBufferCnt>
 1da:	10 92 06 2a 	sts	0x2A06, r1	; 0x802a06 <TxIntEn>
 1de:	10 92 05 28 	sts	0x2805, r1	; 0x802805 <RxBufferWriteIndex>
 1e2:	10 92 00 28 	sts	0x2800, r1	; 0x802800 <__DATA_REGION_ORIGIN__>
 1e6:	10 92 04 28 	sts	0x2804, r1	; 0x802804 <RxBufferCnt>
 1ea:	86 ea       	ldi	r24, 0xA6	; 166
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7f4868>
 1f2:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7f4869>
 1f6:	83 e0       	ldi	r24, 0x03	; 3
 1f8:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <__TEXT_REGION_LENGTH__+0x7f4867>
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f4421>
 202:	80 ec       	ldi	r24, 0xC0	; 192
 204:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x7f4866>
 208:	80 e8       	ldi	r24, 0x80	; 128
 20a:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <__TEXT_REGION_LENGTH__+0x7f4865>
 20e:	08 95       	ret

00000210 <USART_SendCh>:
 210:	e0 91 01 28 	lds	r30, 0x2801	; 0x802801 <TxBufferWriteIndex>
 214:	91 e0       	ldi	r25, 0x01	; 1
 216:	9e 0f       	add	r25, r30
 218:	90 93 01 28 	sts	0x2801, r25	; 0x802801 <TxBufferWriteIndex>
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	ea 5f       	subi	r30, 0xFA	; 250
 220:	f6 4d       	sbci	r31, 0xD6	; 214
 222:	80 83       	st	Z, r24
 224:	f8 94       	cli
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	06 c0       	rjmp	.+12     	; 0x236 <USART_SendCh+0x26>
 22a:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <TxBufferCnt>
 22e:	8f 5f       	subi	r24, 0xFF	; 255
 230:	80 93 02 28 	sts	0x2802, r24	; 0x802802 <TxBufferCnt>
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	81 11       	cpse	r24, r1
 238:	f8 cf       	rjmp	.-16     	; 0x22a <USART_SendCh+0x1a>
 23a:	78 94       	sei
 23c:	e5 e6       	ldi	r30, 0x65	; 101
 23e:	f8 e0       	ldi	r31, 0x08	; 8
 240:	80 81       	ld	r24, Z
 242:	80 62       	ori	r24, 0x20	; 32
 244:	80 83       	st	Z, r24
 246:	08 95       	ret

00000248 <USART_SendText>:

void USART_SendText(char *text)
{
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	ec 01       	movw	r28, r24
 24e:	01 c0       	rjmp	.+2      	; 0x252 <USART_SendText+0xa>
	do{
		if(*text) USART_SendCh(*text);			//Wylij znak
	} while(*text++ != 0);			//Pêtla a¿ do napotkania znaku NUL
 250:	e9 01       	movw	r28, r18
}

void USART_SendText(char *text)
{
	do{
		if(*text) USART_SendCh(*text);			//Wylij znak
 252:	88 81       	ld	r24, Y
 254:	81 11       	cpse	r24, r1
 256:	0e 94 08 01 	call	0x210	; 0x210 <USART_SendCh>
	} while(*text++ != 0);			//Pêtla a¿ do napotkania znaku NUL
 25a:	9e 01       	movw	r18, r28
 25c:	2f 5f       	subi	r18, 0xFF	; 255
 25e:	3f 4f       	sbci	r19, 0xFF	; 255
 260:	88 81       	ld	r24, Y
 262:	81 11       	cpse	r24, r1
 264:	f5 cf       	rjmp	.-22     	; 0x250 <USART_SendText+0x8>
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <LED_Init>:

void LED_Init()
{
	PORTF_DIRSET = PIN5_bm;			//Pin IO do którego jest pod³¹czony LED	
 26c:	80 e2       	ldi	r24, 0x20	; 32
 26e:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7f44a1>
 272:	08 95       	ret

00000274 <LED_On>:
}

void LED_On()
{
	PORTF_OUTCLR = PIN5_bm;
 274:	80 e2       	ldi	r24, 0x20	; 32
 276:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f44a6>
 27a:	08 95       	ret

0000027c <LED_Off>:
}

void LED_Off()
{
	PORTF_OUTSET = PIN5_bm;
 27c:	80 e2       	ldi	r24, 0x20	; 32
 27e:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f44a5>
 282:	08 95       	ret

00000284 <LED_Toggle>:
}

void LED_Toggle()
{
	PORTF_OUTTGL = PIN5_bm;	
 284:	80 e2       	ldi	r24, 0x20	; 32
 286:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
 28a:	08 95       	ret

0000028c <main>:
}

int main(void)
{
	CCP = CCP_IOREG_gc;
 28c:	88 ed       	ldi	r24, 0xD8	; 216
 28e:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0;		//20 MHz
 290:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
	
	UART_Init();				//Inicjalizacja USART
 294:	0e 94 e7 00 	call	0x1ce	; 0x1ce <UART_Init>
	LED_Init();					//LED na module
 298:	0e 94 36 01 	call	0x26c	; 0x26c <LED_Init>
	sei();						//Odblokowujemy przerwania
 29c:	78 94       	sei
	
    /* Replace with your application code */
    while (1) 
    {
		if(TxBufferCnt == 0) USART_SendText("Test0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\r\n");
 29e:	80 91 02 28 	lds	r24, 0x2802	; 0x802802 <TxBufferCnt>
 2a2:	81 11       	cpse	r24, r1
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <main+0x22>
 2a6:	8c e1       	ldi	r24, 0x1C	; 28
 2a8:	93 e4       	ldi	r25, 0x43	; 67
 2aa:	0e 94 24 01 	call	0x248	; 0x248 <USART_SendText>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ae:	8f e4       	ldi	r24, 0x4F	; 79
 2b0:	93 ec       	ldi	r25, 0xC3	; 195
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <main+0x26>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <main+0x2c>
 2b8:	00 00       	nop
		_delay_ms(10);
		uint8_t RecCh;		//Odebrany znak
		if(RxBufferCnt >= 1)		//Sprawd czy w buforze znajduje siê jaki nieodczytany znak?
 2ba:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <RxBufferCnt>
 2be:	88 23       	and	r24, r24
 2c0:	71 f3       	breq	.-36     	; 0x29e <main+0x12>
		{
			RecCh = RxBuffer[RxBufReadIndex++];				//Odczytaj znak z budora
 2c2:	e0 91 00 28 	lds	r30, 0x2800	; 0x802800 <__DATA_REGION_ORIGIN__>
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	8e 0f       	add	r24, r30
 2ca:	80 93 00 28 	sts	0x2800, r24	; 0x802800 <__DATA_REGION_ORIGIN__>
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	ea 5f       	subi	r30, 0xFA	; 250
 2d2:	f7 4d       	sbci	r31, 0xD7	; 215
 2d4:	90 81       	ld	r25, Z
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2d6:	f8 94       	cli
			RxBufReadIndex%=sizeof(RxBuffer);
			ATOMIC_BLOCK(ATOMIC_FORCEON) RxBufferCnt--;		//To musi byæ zrealizowane atomowo
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	06 c0       	rjmp	.+12     	; 0x2e8 <main+0x5c>
 2dc:	80 91 04 28 	lds	r24, 0x2804	; 0x802804 <RxBufferCnt>
 2e0:	81 50       	subi	r24, 0x01	; 1
 2e2:	80 93 04 28 	sts	0x2804, r24	; 0x802804 <RxBufferCnt>
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	81 11       	cpse	r24, r1
 2ea:	f8 cf       	rjmp	.-16     	; 0x2dc <main+0x50>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 2ec:	78 94       	sei
			switch(RecCh)
 2ee:	91 33       	cpi	r25, 0x31	; 49
 2f0:	29 f0       	breq	.+10     	; 0x2fc <main+0x70>
 2f2:	94 37       	cpi	r25, 0x74	; 116
 2f4:	49 f0       	breq	.+18     	; 0x308 <main+0x7c>
 2f6:	90 33       	cpi	r25, 0x30	; 48
 2f8:	51 f4       	brne	.+20     	; 0x30e <main+0x82>
 2fa:	03 c0       	rjmp	.+6      	; 0x302 <main+0x76>
			{
				case '1'	:		LED_On();		break;
 2fc:	0e 94 3a 01 	call	0x274	; 0x274 <LED_On>
 300:	ce cf       	rjmp	.-100    	; 0x29e <main+0x12>
				case '0'	:		LED_Off();		break;
 302:	0e 94 3e 01 	call	0x27c	; 0x27c <LED_Off>
 306:	cb cf       	rjmp	.-106    	; 0x29e <main+0x12>
				case 't'	:		LED_Toggle();	break;
 308:	0e 94 42 01 	call	0x284	; 0x284 <LED_Toggle>
 30c:	c8 cf       	rjmp	.-112    	; 0x29e <main+0x12>
				default		:		USART_SendText("Niezrozumiale polecenie\r\n");	break;
 30e:	81 e8       	ldi	r24, 0x81	; 129
 310:	93 e4       	ldi	r25, 0x43	; 67
 312:	0e 94 24 01 	call	0x248	; 0x248 <USART_SendText>
 316:	c3 cf       	rjmp	.-122    	; 0x29e <main+0x12>

00000318 <_exit>:
 318:	f8 94       	cli

0000031a <__stop_program>:
 31a:	ff cf       	rjmp	.-2      	; 0x31a <__stop_program>
