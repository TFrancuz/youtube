
AY-UARTplayer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000005cc  00000660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000040a  00800104  00800104  00000664  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f9a  00000000  00000000  0000078c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008d9  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000795  00000000  00000000  00001fff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001b8  00000000  00000000  00002794  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000666  00000000  00000000  0000294c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000549  00000000  00000000  00002fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000034fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ec       	ldi	r30, 0xCC	; 204
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <main>
  9e:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <AY_RESETFunc>:
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)));
	/* Get and return received data from buffer */
	return UDR0;
}
  a6:	88 b1       	in	r24, 0x08	; 8
  a8:	8f 7e       	andi	r24, 0xEF	; 239
  aa:	88 b9       	out	0x08, r24	; 8
  ac:	85 e0       	ldi	r24, 0x05	; 5
  ae:	8a 95       	dec	r24
  b0:	f1 f7       	brne	.-4      	; 0xae <AY_RESETFunc+0x8>
  b2:	00 00       	nop
  b4:	88 b1       	in	r24, 0x08	; 8
  b6:	80 61       	ori	r24, 0x10	; 16
  b8:	88 b9       	out	0x08, r24	; 8
  ba:	08 95       	ret

000000bc <AY_SetBDIR>:
  bc:	88 23       	and	r24, r24
  be:	21 f0       	breq	.+8      	; 0xc8 <AY_SetBDIR+0xc>
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	88 60       	ori	r24, 0x08	; 8
  c4:	88 b9       	out	0x08, r24	; 8
  c6:	08 95       	ret
  c8:	88 b1       	in	r24, 0x08	; 8
  ca:	87 7f       	andi	r24, 0xF7	; 247
  cc:	88 b9       	out	0x08, r24	; 8
  ce:	08 95       	ret

000000d0 <AY_SetBC1>:
  d0:	88 23       	and	r24, r24
  d2:	21 f0       	breq	.+8      	; 0xdc <AY_SetBC1+0xc>
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	88 b9       	out	0x08, r24	; 8
  da:	08 95       	ret
  dc:	88 b1       	in	r24, 0x08	; 8
  de:	8f 7d       	andi	r24, 0xDF	; 223
  e0:	88 b9       	out	0x08, r24	; 8
  e2:	08 95       	ret

000000e4 <AY_SetBC2>:
  e4:	88 23       	and	r24, r24
  e6:	21 f0       	breq	.+8      	; 0xf0 <AY_SetBC2+0xc>
  e8:	88 b1       	in	r24, 0x08	; 8
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	88 b9       	out	0x08, r24	; 8
  ee:	08 95       	ret
  f0:	88 b1       	in	r24, 0x08	; 8
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	88 b9       	out	0x08, r24	; 8
  f6:	08 95       	ret

000000f8 <AY_Send8bit>:
  f8:	9a b1       	in	r25, 0x0a	; 10
  fa:	9c 6f       	ori	r25, 0xFC	; 252
  fc:	9a b9       	out	0x0a, r25	; 10
  fe:	9b b1       	in	r25, 0x0b	; 11
 100:	93 70       	andi	r25, 0x03	; 3
 102:	28 2f       	mov	r18, r24
 104:	2c 7f       	andi	r18, 0xFC	; 252
 106:	92 2b       	or	r25, r18
 108:	9b b9       	out	0x0b, r25	; 11
 10a:	97 b1       	in	r25, 0x07	; 7
 10c:	93 60       	ori	r25, 0x03	; 3
 10e:	97 b9       	out	0x07, r25	; 7
 110:	98 b1       	in	r25, 0x08	; 8
 112:	9c 7f       	andi	r25, 0xFC	; 252
 114:	83 70       	andi	r24, 0x03	; 3
 116:	89 2b       	or	r24, r25
 118:	88 b9       	out	0x08, r24	; 8
 11a:	08 95       	ret

0000011c <AY_Inactive>:
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 5e 00 	call	0xbc	; 0xbc <AY_SetBDIR>
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 68 00 	call	0xd0	; 0xd0 <AY_SetBC1>
 128:	80 e0       	ldi	r24, 0x00	; 0
 12a:	0e 94 72 00 	call	0xe4	; 0xe4 <AY_SetBC2>
 12e:	08 95       	ret

00000130 <AY_SelectRegister>:
 130:	0e 94 7c 00 	call	0xf8	; 0xf8 <AY_Send8bit>
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	0e 94 68 00 	call	0xd0	; 0xd0 <AY_SetBC1>
 13a:	8a e0       	ldi	r24, 0x0A	; 10
 13c:	8a 95       	dec	r24
 13e:	f1 f7       	brne	.-4      	; 0x13c <AY_SelectRegister+0xc>
 140:	00 c0       	rjmp	.+0      	; 0x142 <AY_SelectRegister+0x12>
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	0e 94 68 00 	call	0xd0	; 0xd0 <AY_SetBC1>
 148:	08 95       	ret

0000014a <AY_SendDataToRegister>:
 14a:	0e 94 7c 00 	call	0xf8	; 0xf8 <AY_Send8bit>
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	0e 94 72 00 	call	0xe4	; 0xe4 <AY_SetBC2>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 5e 00 	call	0xbc	; 0xbc <AY_SetBDIR>
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	8a 95       	dec	r24
 15e:	f1 f7       	brne	.-4      	; 0x15c <AY_SendDataToRegister+0x12>
 160:	00 c0       	rjmp	.+0      	; 0x162 <AY_SendDataToRegister+0x18>
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 5e 00 	call	0xbc	; 0xbc <AY_SetBDIR>
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 72 00 	call	0xe4	; 0xe4 <AY_SetBC2>
 16e:	08 95       	ret

00000170 <AY_InitClk>:
 170:	82 e4       	ldi	r24, 0x42	; 66
 172:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 176:	85 e0       	ldi	r24, 0x05	; 5
 178:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 182:	84 b1       	in	r24, 0x04	; 4
 184:	88 60       	ori	r24, 0x08	; 8
 186:	84 b9       	out	0x04, r24	; 4
 188:	08 95       	ret

0000018a <USART_RecChNonBlocking>:

_Bool USART_RecChNonBlocking(uint8_t *ch)
{
 18a:	fc 01       	movw	r30, r24
	if(UCSR0A & (1<<RXC0))
 18c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 190:	99 23       	and	r25, r25
 192:	2c f4       	brge	.+10     	; 0x19e <USART_RecChNonBlocking+0x14>
	{
		*ch = UDR0;
 194:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 198:	80 83       	st	Z, r24
		return true;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	08 95       	ret
	}
	return false;				//Nie by³o znaku w buforze nadajnika
 19e:	80 e0       	ldi	r24, 0x00	; 0
}
 1a0:	08 95       	ret

000001a2 <UART_RTS>:

void UART_RTS(_Bool state)		//true - stan aktywny sygna³u RTS
{
	if(!state) PORTB &= ~(1 << UART_RTS_PIN);
 1a2:	81 11       	cpse	r24, r1
 1a4:	04 c0       	rjmp	.+8      	; 0x1ae <UART_RTS+0xc>
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	85 b9       	out	0x05, r24	; 5
 1ac:	08 95       	ret
		else PORTB |= (1 << UART_RTS_PIN);
 1ae:	85 b1       	in	r24, 0x05	; 5
 1b0:	84 60       	ori	r24, 0x04	; 4
 1b2:	85 b9       	out	0x05, r24	; 5
 1b4:	08 95       	ret

000001b6 <USART_Init>:
unsigned char USART_Receive( void );

void USART_Init()
{
	/*Set baud rate */
	UBRR0H = (unsigned char)(MYUBRR>>8);
 1b6:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)MYUBRR;
 1ba:	80 e1       	ldi	r24, 0x10	; 16
 1bc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	//Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1c0:	88 e1       	ldi	r24, 0x18	; 24
 1c2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	/* Set frame format: 8data, 1stop bit */
	UCSR0C = (3<<UCSZ00);
 1c6:	86 e0       	ldi	r24, 0x06	; 6
 1c8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
	
	//Configure RTS pin
	DDRB |= (1 << UART_RTS_PIN);	//Pin RTS jest wyjciem
 1cc:	84 b1       	in	r24, 0x04	; 4
 1ce:	84 60       	ori	r24, 0x04	; 4
 1d0:	84 b9       	out	0x04, r24	; 4
	UART_RTS(false);				//Dodatkowo RTS jest wyjciem w stanie 0
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_RTS>
	DDRD |= (1 << PIND1);			//Pin TxD jest wyjciem
 1d8:	8a b1       	in	r24, 0x0a	; 10
 1da:	82 60       	ori	r24, 0x02	; 2
 1dc:	8a b9       	out	0x0a, r24	; 10
 1de:	08 95       	ret

000001e0 <__vector_11>:
	if(!state) PORTB &= ~(1 << UART_RTS_PIN);
		else PORTB |= (1 << UART_RTS_PIN);
}

ISR(TIMER1_COMPA_vect)			//Tu odtwarzamy przes³ane z PC info o rejestrach
{
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	3f 93       	push	r19
 1ee:	4f 93       	push	r20
 1f0:	5f 93       	push	r21
 1f2:	6f 93       	push	r22
 1f4:	7f 93       	push	r23
 1f6:	8f 93       	push	r24
 1f8:	9f 93       	push	r25
 1fa:	af 93       	push	r26
 1fc:	bf 93       	push	r27
 1fe:	cf 93       	push	r28
 200:	df 93       	push	r29
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
	enum PSG_States {PSG_Nothing, PSG_Data, PSG_DELAY};
	static enum PSG_States State;		//Stan interpretera pliku PSG
	static uint16_t INTDelay;			//Przez ile przerwañ nic nie wysy³amy do AY-3

	if((AYPlay) && (RecDataNo > 0))
 206:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <AYPlay>
 20a:	88 23       	and	r24, r24
 20c:	09 f4       	brne	.+2      	; 0x210 <__vector_11+0x30>
 20e:	37 c1       	rjmp	.+622    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 210:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <RecDataNo>
 214:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <RecDataNo+0x1>
 218:	18 16       	cp	r1, r24
 21a:	19 06       	cpc	r1, r25
 21c:	0c f0       	brlt	.+2      	; 0x220 <__vector_11+0x40>
 21e:	2f c1       	rjmp	.+606    	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
	{
		switch(State)
 220:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <State.2136>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	09 f4       	brne	.+2      	; 0x22a <__vector_11+0x4a>
 228:	40 c0       	rjmp	.+128    	; 0x2aa <__vector_11+0xca>
 22a:	20 f0       	brcs	.+8      	; 0x234 <__vector_11+0x54>
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	09 f4       	brne	.+2      	; 0x232 <__vector_11+0x52>
 230:	16 c1       	rjmp	.+556    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 232:	42 c1       	rjmp	.+644    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		{
			case PSG_Nothing	:	
									{
										PSF_Header *Header = (PSF_Header *)&Buffers[AYPlayPtr];
 234:	c0 91 07 01 	lds	r28, 0x0107	; 0x800107 <AYPlayPtr>
 238:	d0 91 08 01 	lds	r29, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 23c:	c2 5f       	subi	r28, 0xF2	; 242
 23e:	de 4f       	sbci	r29, 0xFE	; 254
										if((memcmp(Header->ID, "PSG", 3) == 0) && (Header->EoT == 0x1a)) 
 240:	43 e0       	ldi	r20, 0x03	; 3
 242:	50 e0       	ldi	r21, 0x00	; 0
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	71 e0       	ldi	r23, 0x01	; 1
 248:	ce 01       	movw	r24, r28
 24a:	0e 94 d7 02 	call	0x5ae	; 0x5ae <memcmp>
 24e:	89 2b       	or	r24, r25
 250:	c9 f4       	brne	.+50     	; 0x284 <__vector_11+0xa4>
 252:	8b 81       	ldd	r24, Y+3	; 0x03
 254:	8a 31       	cpi	r24, 0x1A	; 26
 256:	b1 f4       	brne	.+44     	; 0x284 <__vector_11+0xa4>
										{
											State = PSG_Data;
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <State.2136>
											AYPlayPtr += sizeof(PSF_Header);	//Przeskakujemy nag³ówek, wszystko jest ok
 25e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <AYPlayPtr>
 262:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 266:	40 96       	adiw	r24, 0x10	; 16
 268:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <AYPlayPtr+0x1>
 26c:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <AYPlayPtr>
											RecDataNo -= sizeof(PSF_Header);
 270:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <RecDataNo>
 274:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <RecDataNo+0x1>
 278:	40 97       	sbiw	r24, 0x10	; 16
 27a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <RecDataNo+0x1>
 27e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <RecDataNo>
 282:	1a c1       	rjmp	.+564    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
										} else 
										{
											AYPlayPtr++;		//Zobaczmy czy nag³ównek nie znajduje siê od kolejnego bajtu
 284:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <AYPlayPtr>
 288:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 28c:	01 96       	adiw	r24, 0x01	; 1
 28e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <AYPlayPtr+0x1>
 292:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <AYPlayPtr>
											RecDataNo--;
 296:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <RecDataNo>
 29a:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <RecDataNo+0x1>
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <RecDataNo+0x1>
 2a4:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <RecDataNo>
 2a8:	07 c1       	rjmp	.+526    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
										}
									}
									break;
									
			case PSG_Data		:	if(Buffers[AYPlayPtr] == PSG_IntMarker)
 2aa:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <AYPlayPtr>
 2ae:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 2b2:	e2 5f       	subi	r30, 0xF2	; 242
 2b4:	fe 4f       	sbci	r31, 0xFE	; 254
 2b6:	80 81       	ld	r24, Z
 2b8:	8f 3f       	cpi	r24, 0xFF	; 255
 2ba:	09 f0       	breq	.+2      	; 0x2be <__vector_11+0xde>
 2bc:	7c c0       	rjmp	.+248    	; 0x3b6 <__vector_11+0x1d6>
									{
										AYPlayPtr++; AYPlayPtr %= sizeof(Buffers); RecDataNo--;
 2be:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <AYPlayPtr>
 2c2:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 2c6:	01 96       	adiw	r24, 0x01	; 1
 2c8:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <AYPlayPtr+0x1>
 2cc:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <AYPlayPtr>
 2d0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <AYPlayPtr>
 2d4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 2d8:	93 70       	andi	r25, 0x03	; 3
 2da:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <AYPlayPtr+0x1>
 2de:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <AYPlayPtr>
 2e2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <RecDataNo>
 2e6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <RecDataNo+0x1>
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <RecDataNo+0x1>
 2f0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <RecDataNo>
										while((Buffers[AYPlayPtr] != PSG_IntMarker) && (Buffers[AYPlayPtr] != PSG_DelayMarker))
 2f4:	4b c0       	rjmp	.+150    	; 0x38c <__vector_11+0x1ac>
										{
											uint8_t AYReg = Buffers[AYPlayPtr++];	//Pobierz nr rejestru
 2f6:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <AYPlayPtr>
 2fa:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 2fe:	9c 01       	movw	r18, r24
 300:	2f 5f       	subi	r18, 0xFF	; 255
 302:	3f 4f       	sbci	r19, 0xFF	; 255
 304:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <AYPlayPtr+0x1>
 308:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <AYPlayPtr>
 30c:	fc 01       	movw	r30, r24
 30e:	e2 5f       	subi	r30, 0xF2	; 242
 310:	fe 4f       	sbci	r31, 0xFE	; 254
 312:	80 81       	ld	r24, Z
											AYPlayPtr %= sizeof(Buffers);
 314:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <AYPlayPtr>
 318:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 31c:	33 70       	andi	r19, 0x03	; 3
 31e:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <AYPlayPtr+0x1>
 322:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <AYPlayPtr>
											RecDataNo--;
 326:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <RecDataNo>
 32a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <RecDataNo+0x1>
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	31 09       	sbc	r19, r1
 332:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <RecDataNo+0x1>
 336:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <RecDataNo>
											uint8_t AYData = Buffers[AYPlayPtr++];	//Pobierz dan¹ do rejestru
 33a:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <AYPlayPtr>
 33e:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 342:	a9 01       	movw	r20, r18
 344:	4f 5f       	subi	r20, 0xFF	; 255
 346:	5f 4f       	sbci	r21, 0xFF	; 255
 348:	50 93 08 01 	sts	0x0108, r21	; 0x800108 <AYPlayPtr+0x1>
 34c:	40 93 07 01 	sts	0x0107, r20	; 0x800107 <AYPlayPtr>
 350:	f9 01       	movw	r30, r18
 352:	e2 5f       	subi	r30, 0xF2	; 242
 354:	fe 4f       	sbci	r31, 0xFE	; 254
 356:	c0 81       	ld	r28, Z
											AYPlayPtr %= sizeof(Buffers);
 358:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <AYPlayPtr>
 35c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 360:	33 70       	andi	r19, 0x03	; 3
 362:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <AYPlayPtr+0x1>
 366:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <AYPlayPtr>
											RecDataNo--;
 36a:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <RecDataNo>
 36e:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <RecDataNo+0x1>
 372:	21 50       	subi	r18, 0x01	; 1
 374:	31 09       	sbc	r19, r1
 376:	30 93 0d 01 	sts	0x010D, r19	; 0x80010d <RecDataNo+0x1>
 37a:	20 93 0c 01 	sts	0x010C, r18	; 0x80010c <RecDataNo>
											if(AYReg < 16)	//Sprawd czy mamy prawid³owy rejestr, w przeciwnym przypadku zignoruj
 37e:	80 31       	cpi	r24, 0x10	; 16
 380:	28 f4       	brcc	.+10     	; 0x38c <__vector_11+0x1ac>
											{
												AY_SelectRegister(AYReg);
 382:	0e 94 98 00 	call	0x130	; 0x130 <AY_SelectRegister>
												AY_SendDataToRegister(AYData);
 386:	8c 2f       	mov	r24, r28
 388:	0e 94 a5 00 	call	0x14a	; 0x14a <AY_SendDataToRegister>
									break;
									
			case PSG_Data		:	if(Buffers[AYPlayPtr] == PSG_IntMarker)
									{
										AYPlayPtr++; AYPlayPtr %= sizeof(Buffers); RecDataNo--;
										while((Buffers[AYPlayPtr] != PSG_IntMarker) && (Buffers[AYPlayPtr] != PSG_DelayMarker))
 38c:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <AYPlayPtr>
 390:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 394:	e2 5f       	subi	r30, 0xF2	; 242
 396:	fe 4f       	sbci	r31, 0xFE	; 254
 398:	80 81       	ld	r24, Z
 39a:	8f 3f       	cpi	r24, 0xFF	; 255
 39c:	09 f4       	brne	.+2      	; 0x3a0 <__vector_11+0x1c0>
 39e:	8c c0       	rjmp	.+280    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 3a0:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <AYPlayPtr>
 3a4:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 3a8:	e2 5f       	subi	r30, 0xF2	; 242
 3aa:	fe 4f       	sbci	r31, 0xFE	; 254
 3ac:	80 81       	ld	r24, Z
 3ae:	8e 3f       	cpi	r24, 0xFE	; 254
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <__vector_11+0x1d4>
 3b2:	a1 cf       	rjmp	.-190    	; 0x2f6 <__vector_11+0x116>
 3b4:	81 c0       	rjmp	.+258    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
											{
												AY_SelectRegister(AYReg);
												AY_SendDataToRegister(AYData);
											}
										}
									} else if(Buffers[AYPlayPtr] == PSG_DelayMarker)
 3b6:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <AYPlayPtr>
 3ba:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 3be:	e2 5f       	subi	r30, 0xF2	; 242
 3c0:	fe 4f       	sbci	r31, 0xFE	; 254
 3c2:	80 81       	ld	r24, Z
 3c4:	8e 3f       	cpi	r24, 0xFE	; 254
 3c6:	09 f0       	breq	.+2      	; 0x3ca <__vector_11+0x1ea>
 3c8:	77 c0       	rjmp	.+238    	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
											{
												AYPlayPtr++; AYPlayPtr %= sizeof(Buffers);
 3ca:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <AYPlayPtr>
 3ce:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 3d2:	01 96       	adiw	r24, 0x01	; 1
 3d4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <AYPlayPtr+0x1>
 3d8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <AYPlayPtr>
 3dc:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <AYPlayPtr>
 3e0:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 3e4:	93 70       	andi	r25, 0x03	; 3
 3e6:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <AYPlayPtr+0x1>
 3ea:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <AYPlayPtr>
												RecDataNo--;
 3ee:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <RecDataNo>
 3f2:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <RecDataNo+0x1>
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <RecDataNo+0x1>
 3fc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <RecDataNo>
												INTDelay = Buffers[AYPlayPtr];		//Liczba przerwañ, które omijamy bez wpisów do AY-3 - nale¿y pomno¿yæ razy 4
 400:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <AYPlayPtr>
 404:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 408:	e2 5f       	subi	r30, 0xF2	; 242
 40a:	fe 4f       	sbci	r31, 0xFE	; 254
 40c:	80 81       	ld	r24, Z
 40e:	90 e0       	ldi	r25, 0x00	; 0
												INTDelay <<= 2;
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	88 0f       	add	r24, r24
 416:	99 1f       	adc	r25, r25
 418:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 41c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
												AYPlayPtr++; AYPlayPtr %= sizeof(Buffers);
 420:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <AYPlayPtr>
 424:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 428:	01 96       	adiw	r24, 0x01	; 1
 42a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <AYPlayPtr+0x1>
 42e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <AYPlayPtr>
 432:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <AYPlayPtr>
 436:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <AYPlayPtr+0x1>
 43a:	93 70       	andi	r25, 0x03	; 3
 43c:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <AYPlayPtr+0x1>
 440:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <AYPlayPtr>
												RecDataNo--;
 444:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <RecDataNo>
 448:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <RecDataNo+0x1>
 44c:	01 97       	sbiw	r24, 0x01	; 1
 44e:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <RecDataNo+0x1>
 452:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <RecDataNo>
												State = PSG_DELAY;
 456:	82 e0       	ldi	r24, 0x02	; 2
 458:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <State.2136>
 45c:	2d c0       	rjmp	.+90     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
											}
									break;
									
			case PSG_DELAY		:	if(INTDelay) INTDelay--; else State = PSG_Data;	//Nic nie robimy, tylko czekamy a¿ INTDelay == 0
 45e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 462:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 466:	00 97       	sbiw	r24, 0x00	; 0
 468:	31 f0       	breq	.+12     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 470:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 474:	21 c0       	rjmp	.+66     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <State.2136>
 47c:	1d c0       	rjmp	.+58     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
									break;				
		}

	} else 
	{
		State = PSG_Nothing;
 47e:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <State.2136>
		if(RecDataNo <= 0) 
 482:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <RecDataNo>
 486:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <RecDataNo+0x1>
 48a:	18 16       	cp	r1, r24
 48c:	19 06       	cpc	r1, r25
 48e:	a4 f0       	brlt	.+40     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
		{
			AYPlay = false;
 490:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <AYPlay>
			RecDataNo = 0;						//Nie ma ¿adnych nowych danych do interpretacji
 494:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <RecDataNo+0x1>
 498:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <RecDataNo>
			AYPlayPtr = ActBufferPtr;			//Miejsce, w którym rozpoczynaj¹ siê nowe dane
 49c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ActBufferPtr>
 4a0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ActBufferPtr+0x1>
 4a4:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <AYPlayPtr+0x1>
 4a8:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <AYPlayPtr>
			AY_SelectRegister(REG_IO_MIXER);
 4ac:	87 e0       	ldi	r24, 0x07	; 7
 4ae:	0e 94 98 00 	call	0x130	; 0x130 <AY_SelectRegister>
			AY_SendDataToRegister(0xFF);		//Wycisz dwiêk z AY-3 - wiêkszoæ plików PSG nie wy³¹cza uk³adu
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	0e 94 a5 00 	call	0x14a	; 0x14a <AY_SendDataToRegister>
		}
	}
}
 4b8:	ff 91       	pop	r31
 4ba:	ef 91       	pop	r30
 4bc:	df 91       	pop	r29
 4be:	cf 91       	pop	r28
 4c0:	bf 91       	pop	r27
 4c2:	af 91       	pop	r26
 4c4:	9f 91       	pop	r25
 4c6:	8f 91       	pop	r24
 4c8:	7f 91       	pop	r23
 4ca:	6f 91       	pop	r22
 4cc:	5f 91       	pop	r21
 4ce:	4f 91       	pop	r20
 4d0:	3f 91       	pop	r19
 4d2:	2f 91       	pop	r18
 4d4:	0f 90       	pop	r0
 4d6:	0f be       	out	0x3f, r0	; 63
 4d8:	0f 90       	pop	r0
 4da:	1f 90       	pop	r1
 4dc:	18 95       	reti

000004de <Timer_Init>:

void Timer_Init()			//Inicjalizacja timera odpowiedzialnego za generowanie przerwañ dla AY
{
	TCCR1A = 0;		//CTC Mode
 4de:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	TCCR1B = (1 << WGM12) | (1 << CS12);	//CTC mode, prescaler /256
 4e2:	8c e0       	ldi	r24, 0x0C	; 12
 4e4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	OCR1A = F_CPU/256/50;					//Szybkoæ odtwarzania dwiêku - normalnie 1 próbka co 20ms, 50 próbek/s
 4e8:	82 ee       	ldi	r24, 0xE2	; 226
 4ea:	94 e0       	ldi	r25, 0x04	; 4
 4ec:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4f0:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
    TIMSK1 = (1 << OCIE1A);					//Odblokuj przerwania CMP
 4f4:	82 e0       	ldi	r24, 0x02	; 2
 4f6:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
 4fa:	08 95       	ret

000004fc <main>:
}

int main(void)
{
	USART_Init();			//Inicjalizacja UART1
 4fc:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_Init>
	DDRC = (1 << AY_BDIR) | (1 << AY_BC1) | (1 << AY_BC2) | (1 <<AY_RESET);	//Ustaw piny RESET, BDIR, BC1, BC2 jako wyjcia
 500:	8c e3       	ldi	r24, 0x3C	; 60
 502:	87 b9       	out	0x07, r24	; 7
	AY_Inactive();			//Pocz¹tkowy stan pinów steruj¹cych AY
 504:	0e 94 8e 00 	call	0x11c	; 0x11c <AY_Inactive>
	AY_RESETFunc();			//Zresetuj AY
 508:	0e 94 53 00 	call	0xa6	; 0xa6 <AY_RESETFunc>
	AY_InitClk();			//Timer generuj¹cy sygna³ CLK dla uk³adu AY - ok. 2 MHz
 50c:	0e 94 b8 00 	call	0x170	; 0x170 <AY_InitClk>
	Timer_Init();			//Inicjalizacja timera generuj¹cego przerwania 50Hz
 510:	0e 94 6f 02 	call	0x4de	; 0x4de <Timer_Init>

	sei();					//Odblokuj przerwania
 514:	78 94       	sei

	AYPlayPtr = 0;			//Wskanik na pocz¹tek bufora
 516:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <AYPlayPtr+0x1>
 51a:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <AYPlayPtr>
	AYPlay = false;			//Na razie nic nie ma, wiêc nic nie odtwarzamy
 51e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <AYPlay>
	ActBufferPtr = 0;		//Wskanik do bufora
 522:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <ActBufferPtr+0x1>
 526:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <ActBufferPtr>
	RecDataNo = 0;			//Pocz¹tkowa liczba odebranych bajtów w buforze
 52a:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <RecDataNo+0x1>
 52e:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <RecDataNo>

	while (1)
	{
		if(USART_RecChNonBlocking(&Buffers[ActBufferPtr])) 
 532:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ActBufferPtr>
 536:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ActBufferPtr+0x1>
 53a:	82 5f       	subi	r24, 0xF2	; 242
 53c:	9e 4f       	sbci	r25, 0xFE	; 254
 53e:	0e 94 c5 00 	call	0x18a	; 0x18a <USART_RecChNonBlocking>
 542:	88 23       	and	r24, r24
 544:	d1 f0       	breq	.+52     	; 0x57a <main+0x7e>
		{
			ActBufferPtr++;
 546:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ActBufferPtr>
 54a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <ActBufferPtr+0x1>
 54e:	01 96       	adiw	r24, 0x01	; 1
			ActBufferPtr %= sizeof(Buffers);
 550:	93 70       	andi	r25, 0x03	; 3
 552:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <ActBufferPtr+0x1>
 556:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ActBufferPtr>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 55a:	f8 94       	cli
			ATOMIC_BLOCK(ATOMIC_FORCEON) RecDataNo++;
 55c:	81 e0       	ldi	r24, 0x01	; 1
 55e:	0a c0       	rjmp	.+20     	; 0x574 <main+0x78>
 560:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <RecDataNo>
 564:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <RecDataNo+0x1>
 568:	01 96       	adiw	r24, 0x01	; 1
 56a:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <RecDataNo+0x1>
 56e:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <RecDataNo>
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	81 11       	cpse	r24, r1
 576:	f4 cf       	rjmp	.-24     	; 0x560 <main+0x64>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 578:	78 94       	sei
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 57a:	f8 94       	cli
		}

		uint16_t tmpChNo;
		ATOMIC_BLOCK(ATOMIC_FORCEON) tmpChNo = RecDataNo;
 57c:	81 e0       	ldi	r24, 0x01	; 1
 57e:	05 c0       	rjmp	.+10     	; 0x58a <main+0x8e>
 580:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <RecDataNo>
 584:	d0 91 0d 01 	lds	r29, 0x010D	; 0x80010d <RecDataNo+0x1>
 588:	80 e0       	ldi	r24, 0x00	; 0
 58a:	81 11       	cpse	r24, r1
 58c:	f9 cf       	rjmp	.-14     	; 0x580 <main+0x84>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 58e:	78 94       	sei
		if(tmpChNo > BUFFER_TH)	//czy zbli¿amy siê do koñca bufora?
 590:	c5 38       	cpi	r28, 0x85	; 133
 592:	83 e0       	ldi	r24, 0x03	; 3
 594:	d8 07       	cpc	r29, r24
 596:	38 f0       	brcs	.+14     	; 0x5a6 <main+0xaa>
		{
			UART_RTS(true);			//Zatrzymaj przyjmowanie znaków
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_RTS>
			AYPlay = true;			//Mamy dane, mo¿emy je odtwarzaæ
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <AYPlay>
 5a4:	c6 cf       	rjmp	.-116    	; 0x532 <main+0x36>
		} else UART_RTS(false);		//Spoko, odczytujemy dane dalej
 5a6:	80 e0       	ldi	r24, 0x00	; 0
 5a8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <UART_RTS>
 5ac:	c2 cf       	rjmp	.-124    	; 0x532 <main+0x36>

000005ae <memcmp>:
 5ae:	fb 01       	movw	r30, r22
 5b0:	dc 01       	movw	r26, r24
 5b2:	04 c0       	rjmp	.+8      	; 0x5bc <memcmp+0xe>
 5b4:	8d 91       	ld	r24, X+
 5b6:	01 90       	ld	r0, Z+
 5b8:	80 19       	sub	r24, r0
 5ba:	21 f4       	brne	.+8      	; 0x5c4 <memcmp+0x16>
 5bc:	41 50       	subi	r20, 0x01	; 1
 5be:	50 40       	sbci	r21, 0x00	; 0
 5c0:	c8 f7       	brcc	.-14     	; 0x5b4 <memcmp+0x6>
 5c2:	88 1b       	sub	r24, r24
 5c4:	99 0b       	sbc	r25, r25
 5c6:	08 95       	ret

000005c8 <_exit>:
 5c8:	f8 94       	cli

000005ca <__stop_program>:
 5ca:	ff cf       	rjmp	.-2      	; 0x5ca <__stop_program>
