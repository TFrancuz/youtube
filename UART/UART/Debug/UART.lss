
UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000217  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000021  00004182  00000182  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  00000217  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000248  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b7d  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002746  00000000  00000000  00002e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003e8  00000000  00000000  000055b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c0  00000000  00000000  0000599c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001394  00000000  00000000  00005a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000bf  00000000  00000000  00006df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00006eaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  b0:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <UART_Init>:
	{
		*ch = USART3.RXDATAL;	
		return true;
	}
	return false;				//Nie by³o znaku w buforze nadajnika
}
  b8:	8d e8       	ldi	r24, 0x8D	; 141
  ba:	90 e2       	ldi	r25, 0x20	; 32
  bc:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7f4868>
  c0:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7f4869>
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <__TEXT_REGION_LENGTH__+0x7f4867>
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7f4421>
  d0:	80 ec       	ldi	r24, 0xC0	; 192
  d2:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x7f4866>
  d6:	08 95       	ret

000000d8 <USART_RecCh>:
  d8:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7f4864>
  dc:	88 23       	and	r24, r24
  de:	e4 f7       	brge	.-8      	; 0xd8 <USART_RecCh>
  e0:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
  e4:	08 95       	ret

000000e6 <USART_SendCh>:
  e6:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7f4864>
  ea:	95 ff       	sbrs	r25, 5
  ec:	fc cf       	rjmp	.-8      	; 0xe6 <USART_SendCh>
  ee:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
  f2:	08 95       	ret

000000f4 <USART_SendText>:

void USART_SendText(char *text)
{
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	ec 01       	movw	r28, r24
  fa:	01 c0       	rjmp	.+2      	; 0xfe <USART_SendText+0xa>
	do{
		if(*text) USART_SendCh(*text);			//Wyœlij znak
	} while(*text++ != 0);			//Pêtla a¿ do napotkania znaku NUL
  fc:	e9 01       	movw	r28, r18
}

void USART_SendText(char *text)
{
	do{
		if(*text) USART_SendCh(*text);			//Wyœlij znak
  fe:	88 81       	ld	r24, Y
 100:	81 11       	cpse	r24, r1
 102:	0e 94 73 00 	call	0xe6	; 0xe6 <USART_SendCh>
	} while(*text++ != 0);			//Pêtla a¿ do napotkania znaku NUL
 106:	9e 01       	movw	r18, r28
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	88 81       	ld	r24, Y
 10e:	81 11       	cpse	r24, r1
 110:	f5 cf       	rjmp	.-22     	; 0xfc <USART_SendText+0x8>
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <LED_Init>:

void LED_Init()
{
	PORTF_DIRSET = PIN5_bm;			//Pin IO do którego jest pod³¹czony LED	
 118:	80 e2       	ldi	r24, 0x20	; 32
 11a:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7f44a1>
 11e:	08 95       	ret

00000120 <LED_On>:
}

void LED_On()
{
	PORTF_OUTCLR = PIN5_bm;
 120:	80 e2       	ldi	r24, 0x20	; 32
 122:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7f44a6>
 126:	08 95       	ret

00000128 <LED_Off>:
}

void LED_Off()
{
	PORTF_OUTSET = PIN5_bm;
 128:	80 e2       	ldi	r24, 0x20	; 32
 12a:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7f44a5>
 12e:	08 95       	ret

00000130 <LED_Toggle>:
}

void LED_Toggle()
{
	PORTF_OUTTGL = PIN5_bm;	
 130:	80 e2       	ldi	r24, 0x20	; 32
 132:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7f44a7>
 136:	08 95       	ret

00000138 <main>:
}

int main(void)
{
	CCP = CCP_IOREG_gc;
 138:	88 ed       	ldi	r24, 0xD8	; 216
 13a:	84 bf       	out	0x34, r24	; 52
	CLKCTRL_MCLKCTRLB = 0;		//20 MHz
 13c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__TEXT_REGION_LENGTH__+0x7f4061>
	
	UART_Init();				//Inicjalizacja USART
 140:	0e 94 5c 00 	call	0xb8	; 0xb8 <UART_Init>
	LED_Init();					//LED na module
 144:	0e 94 8c 00 	call	0x118	; 0x118 <LED_Init>
	
    /* Replace with your application code */
    while (1) 
    {
		USART_SendText("Test\r\n");
 148:	82 e8       	ldi	r24, 0x82	; 130
 14a:	91 e4       	ldi	r25, 0x41	; 65
 14c:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART_SendText>
		switch(USART_RecCh())
 150:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_RecCh>
 154:	81 33       	cpi	r24, 0x31	; 49
 156:	29 f0       	breq	.+10     	; 0x162 <main+0x2a>
 158:	84 37       	cpi	r24, 0x74	; 116
 15a:	49 f0       	breq	.+18     	; 0x16e <main+0x36>
 15c:	80 33       	cpi	r24, 0x30	; 48
 15e:	51 f4       	brne	.+20     	; 0x174 <main+0x3c>
 160:	03 c0       	rjmp	.+6      	; 0x168 <main+0x30>
		{
			case '1'	:		LED_On();		break;
 162:	0e 94 90 00 	call	0x120	; 0x120 <LED_On>
 166:	f0 cf       	rjmp	.-32     	; 0x148 <main+0x10>
			case '0'	:		LED_Off();		break;
 168:	0e 94 94 00 	call	0x128	; 0x128 <LED_Off>
 16c:	ed cf       	rjmp	.-38     	; 0x148 <main+0x10>
			case 't'	:		LED_Toggle();	break;
 16e:	0e 94 98 00 	call	0x130	; 0x130 <LED_Toggle>
 172:	ea cf       	rjmp	.-44     	; 0x148 <main+0x10>
			default		:		USART_SendText("Niezrozumiale polecenie\r\n");	break;
 174:	89 e8       	ldi	r24, 0x89	; 137
 176:	91 e4       	ldi	r25, 0x41	; 65
 178:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART_SendText>
 17c:	e5 cf       	rjmp	.-54     	; 0x148 <main+0x10>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
