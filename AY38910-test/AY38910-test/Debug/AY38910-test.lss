
AY38910-test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000206  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d0b  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000779  00000000  00000000  00001057  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004de  00000000  00000000  000017d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ec  00000000  00000000  00001cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000051b  00000000  00000000  00001d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000024d  00000000  00000000  000022b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00002504  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
  78:	0c 94 01 01 	jmp	0x202	; 0x202 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <AY_RESETFunc>:
	_delay_us(1);			//Cykl zapisu trwa max 500 ns
	uint8_t data = AY_Get8bit();
	AY_SetBC1(0);
	AY_SetBC2(0);
	return data;
}
  80:	88 b1       	in	r24, 0x08	; 8
  82:	8f 7e       	andi	r24, 0xEF	; 239
  84:	88 b9       	out	0x08, r24	; 8
  86:	85 e0       	ldi	r24, 0x05	; 5
  88:	8a 95       	dec	r24
  8a:	f1 f7       	brne	.-4      	; 0x88 <AY_RESETFunc+0x8>
  8c:	00 00       	nop
  8e:	88 b1       	in	r24, 0x08	; 8
  90:	80 61       	ori	r24, 0x10	; 16
  92:	88 b9       	out	0x08, r24	; 8
  94:	08 95       	ret

00000096 <AY_SetBDIR>:
  96:	88 23       	and	r24, r24
  98:	21 f0       	breq	.+8      	; 0xa2 <AY_SetBDIR+0xc>
  9a:	88 b1       	in	r24, 0x08	; 8
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	88 b9       	out	0x08, r24	; 8
  a0:	08 95       	ret
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	88 b9       	out	0x08, r24	; 8
  a8:	08 95       	ret

000000aa <AY_SetBC1>:
  aa:	88 23       	and	r24, r24
  ac:	21 f0       	breq	.+8      	; 0xb6 <AY_SetBC1+0xc>
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	82 60       	ori	r24, 0x02	; 2
  b2:	88 b9       	out	0x08, r24	; 8
  b4:	08 95       	ret
  b6:	88 b1       	in	r24, 0x08	; 8
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	88 b9       	out	0x08, r24	; 8
  bc:	08 95       	ret

000000be <AY_SetBC2>:
  be:	88 23       	and	r24, r24
  c0:	21 f0       	breq	.+8      	; 0xca <AY_SetBC2+0xc>
  c2:	88 b1       	in	r24, 0x08	; 8
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	88 b9       	out	0x08, r24	; 8
  c8:	08 95       	ret
  ca:	88 b1       	in	r24, 0x08	; 8
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	88 b9       	out	0x08, r24	; 8
  d0:	08 95       	ret

000000d2 <AY_Send8bit>:
  d2:	9f ef       	ldi	r25, 0xFF	; 255
  d4:	9a b9       	out	0x0a, r25	; 10
  d6:	8b b9       	out	0x0b, r24	; 11
  d8:	08 95       	ret

000000da <AY_Inactive>:
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0e 94 4b 00 	call	0x96	; 0x96 <AY_SetBDIR>
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	0e 94 55 00 	call	0xaa	; 0xaa <AY_SetBC1>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	0e 94 5f 00 	call	0xbe	; 0xbe <AY_SetBC2>
  ec:	08 95       	ret

000000ee <AY_SelectRegister>:
  ee:	0e 94 69 00 	call	0xd2	; 0xd2 <AY_Send8bit>
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 55 00 	call	0xaa	; 0xaa <AY_SetBC1>
  f8:	8a e0       	ldi	r24, 0x0A	; 10
  fa:	8a 95       	dec	r24
  fc:	f1 f7       	brne	.-4      	; 0xfa <AY_SelectRegister+0xc>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <AY_SelectRegister+0x12>
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 55 00 	call	0xaa	; 0xaa <AY_SetBC1>
 106:	08 95       	ret

00000108 <AY_SendDataToRegister>:
 108:	0e 94 69 00 	call	0xd2	; 0xd2 <AY_Send8bit>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <AY_SetBC2>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 4b 00 	call	0x96	; 0x96 <AY_SetBDIR>
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <AY_SendDataToRegister+0x12>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <AY_SendDataToRegister+0x18>
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 4b 00 	call	0x96	; 0x96 <AY_SetBDIR>
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	0e 94 5f 00 	call	0xbe	; 0xbe <AY_SetBC2>
 12c:	08 95       	ret

0000012e <AY_InitClk>:

void AY_InitClk()		//Timer 1 generuje sygna³ Clock dla AY na pinie PB1
{
	TCCR1A = 1 << COM1A0;	//Zmieñ na przeciwny OC1A przy ka¿dym overflow
 12e:	80 e4       	ldi	r24, 0x40	; 64
 130:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
	OCR1A = 4;				//Podziel CPUCLK/8
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 13c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	TCCR1B = (1 << WGM12) | (1 << CS10);	//Tryb CTC, no-preskaling
 140:	89 e0       	ldi	r24, 0x09	; 9
 142:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
	DDRB |= 1 << PINB1;		//Wyjœcie OCA1 timera 
 146:	84 b1       	in	r24, 0x04	; 4
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	84 b9       	out	0x04, r24	; 4
 14c:	08 95       	ret

0000014e <AudioTest>:
}

void AudioTest()
{
	AY_SelectRegister(REG_FREQ_NOISE);	//Rejestr szumu
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(31);
 154:	8f e1       	ldi	r24, 0x1F	; 31
 156:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>
	AY_SelectRegister(REG_IO_MIXER);	//Rejestr kontrolny
 15a:	87 e0       	ldi	r24, 0x07	; 7
 15c:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(0b11111000);	//W³¹cz kana³y A-C
 160:	88 ef       	ldi	r24, 0xF8	; 248
 162:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>
	AY_SelectRegister(REG_LVL_A);
 166:	88 e0       	ldi	r24, 0x08	; 8
 168:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(31);
 16c:	8f e1       	ldi	r24, 0x1F	; 31
 16e:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>
	AY_SelectRegister(REG_LVL_B);
 172:	89 e0       	ldi	r24, 0x09	; 9
 174:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(31);
 178:	8f e1       	ldi	r24, 0x1F	; 31
 17a:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>
	AY_SelectRegister(REG_LVL_C);
 17e:	8a e0       	ldi	r24, 0x0A	; 10
 180:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(31);
 184:	8f e1       	ldi	r24, 0x1F	; 31
 186:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>
	AY_SelectRegister(REG_ENV_SHAPE);				//Envelope
 18a:	8d e0       	ldi	r24, 0x0D	; 13
 18c:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(0b1100);//(0b1010);
 190:	8c e0       	ldi	r24, 0x0C	; 12
 192:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>
	AY_SelectRegister(REG_FREQ_ENV_HI);				//Envelope
 196:	8c e0       	ldi	r24, 0x0C	; 12
 198:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(0b1100);
 19c:	8c e0       	ldi	r24, 0x0C	; 12
 19e:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>
	AY_SelectRegister(REG_FREQ_ENV_LO);				//Envelope
 1a2:	8b e0       	ldi	r24, 0x0B	; 11
 1a4:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(0b1100);
 1a8:	8c e0       	ldi	r24, 0x0C	; 12
 1aa:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>
	AY_SelectRegister(REG_FREQ_A_LO);				//Tone A
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(0b1100);
 1b4:	8c e0       	ldi	r24, 0x0C	; 12
 1b6:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>
	AY_SelectRegister(REG_FREQ_A_HI);				//Tone A
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(0b1100);
 1c0:	8c e0       	ldi	r24, 0x0C	; 12
 1c2:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>

	AY_SelectRegister(REG_FREQ_B_LO);			//Tone B
 1c6:	82 e0       	ldi	r24, 0x02	; 2
 1c8:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(0b1100);	
 1cc:	8c e0       	ldi	r24, 0x0C	; 12
 1ce:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>
	AY_SelectRegister(REG_FREQ_B_HI);			//Tone B
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(0b1100);	
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>
 1de:	08 95       	ret

000001e0 <main>:
}

int main(void)
{
	DDRC = 0b00111110;		//Ustaw piny RESET, BDIR, BC1, BC2, CLOCK jako wyjœcia
 1e0:	8e e3       	ldi	r24, 0x3E	; 62
 1e2:	87 b9       	out	0x07, r24	; 7
	AY_Inactive();			//Pocz¹tkowy stan pinów steruj¹cych AY
 1e4:	0e 94 6d 00 	call	0xda	; 0xda <AY_Inactive>
	AY_InitClk();			//Ustaw zegar taktuj¹cy AY
 1e8:	0e 94 97 00 	call	0x12e	; 0x12e <AY_InitClk>
	AY_RESETFunc();			//Zresetuj AY
 1ec:	0e 94 40 00 	call	0x80	; 0x80 <AY_RESETFunc>
	AY_SelectRegister(0x07);
 1f0:	87 e0       	ldi	r24, 0x07	; 7
 1f2:	0e 94 77 00 	call	0xee	; 0xee <AY_SelectRegister>
	AY_SendDataToRegister(0b11000000);		//Porty A i B jao wyjœcia
 1f6:	80 ec       	ldi	r24, 0xC0	; 192
 1f8:	0e 94 84 00 	call	0x108	; 0x108 <AY_SendDataToRegister>

	AudioTest();
 1fc:	0e 94 a7 00 	call	0x14e	; 0x14e <AudioTest>
 200:	ff cf       	rjmp	.-2      	; 0x200 <main+0x20>

00000202 <_exit>:
 202:	f8 94       	cli

00000204 <__stop_program>:
 204:	ff cf       	rjmp	.-2      	; 0x204 <__stop_program>
