
SRAMTester.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00804000  00000824  000008b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000824  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000020e  00804076  00804076  0000092e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000098c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000040b4  00000000  00000000  00000a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003579  00000000  00000000  00004b00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b2  00000000  00000000  00008079  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000019c  00000000  00000000  0000872c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001cb7  00000000  00000000  000088c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005c7  00000000  00000000  0000a57f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  0000ab46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_53>
  d8:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_54>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e4 e2       	ldi	r30, 0x24	; 36
 108:	f8 e0       	ldi	r31, 0x08	; 8
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a6 37       	cpi	r26, 0x76	; 118
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	22 e4       	ldi	r18, 0x42	; 66
 11c:	a6 e7       	ldi	r26, 0x76	; 118
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a4 38       	cpi	r26, 0x84	; 132
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 42 02 	call	0x484	; 0x484 <main>
 12e:	0c 94 10 04 	jmp	0x820	; 0x820 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <Cmd_SRAM>:
	return true;
}	

_Bool Cmd_SRAM(char *param, char **last)		//Ustaw typ pamiêci SRAM
{
	IC_Type = IC_SRAM;
 136:	10 92 7f 41 	sts	0x417F, r1	; 0x80417f <IC_Type>
	return true;
}
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	08 95       	ret

0000013e <Cmd_DRAM>:

_Bool Cmd_DRAM(char *param, char **last)		//Ustaw typ pamiêci DRAM
{
	IC_Type = IC_DRAM;
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	80 93 7f 41 	sts	0x417F, r24	; 0x80417f <IC_Type>
	return true;
}
 144:	08 95       	ret

00000146 <__vector_53>:
volatile uint8_t TxBufferCnt = 0;
volatile _Bool TxIntEn;
volatile _Bool CmdReceived = false;

ISR(USART3_RXC_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	0b b6       	in	r0, 0x3b	; 59
 152:	0f 92       	push	r0
 154:	2f 93       	push	r18
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	uint8_t recData = USART3_RXDATAL;
 15e:	20 91 60 08 	lds	r18, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
	if((CmdReceived == false) && (RxBufferWriteIndex < sizeof(RxBuffer)))	//Odbieramy znaki tylko jeœli jest pusty bufor poleceñ i jest wolne miejsce
 162:	80 91 76 40 	lds	r24, 0x4076	; 0x804076 <__data_end>
 166:	81 11       	cpse	r24, r1
 168:	2d c0       	rjmp	.+90     	; 0x1c4 <__vector_53+0x7e>
	{
		RxBuffer[RxBufferWriteIndex] = recData;		//Zapisz odczytany znak do bufora
 16a:	80 91 7b 40 	lds	r24, 0x407B	; 0x80407b <RxBufferWriteIndex>
 16e:	e8 2f       	mov	r30, r24
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	e1 58       	subi	r30, 0x81	; 129
 174:	ff 4b       	sbci	r31, 0xBF	; 191
 176:	20 83       	st	Z, r18
		RxBufferCnt++;
 178:	90 91 7a 40 	lds	r25, 0x407A	; 0x80407a <RxBufferCnt>
 17c:	9f 5f       	subi	r25, 0xFF	; 255
 17e:	90 93 7a 40 	sts	0x407A, r25	; 0x80407a <RxBufferCnt>
		if(RxBuffer[RxBufferWriteIndex] == '\n')
 182:	2a 30       	cpi	r18, 0x0A	; 10
 184:	e1 f4       	brne	.+56     	; 0x1be <__vector_53+0x78>
		{
			if((RxBufferWriteIndex >= 1) && (RxBuffer[RxBufferWriteIndex - 1] == '\r')) 
 186:	88 23       	and	r24, r24
 188:	61 f0       	breq	.+24     	; 0x1a2 <__vector_53+0x5c>
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	90 81       	ld	r25, Z
 18e:	9d 30       	cpi	r25, 0x0D	; 13
 190:	41 f4       	brne	.+16     	; 0x1a2 <__vector_53+0x5c>
			{
				--RxBufferWriteIndex;
 192:	81 50       	subi	r24, 0x01	; 1
 194:	80 93 7b 40 	sts	0x407B, r24	; 0x80407b <RxBufferWriteIndex>
				--RxBufferCnt;
 198:	80 91 7a 40 	lds	r24, 0x407A	; 0x80407a <RxBufferCnt>
 19c:	81 50       	subi	r24, 0x01	; 1
 19e:	80 93 7a 40 	sts	0x407A, r24	; 0x80407a <RxBufferCnt>
			}
			RxBuffer[RxBufferWriteIndex] = 0;	//Wpisz koñcowy znak NUL
 1a2:	e0 91 7b 40 	lds	r30, 0x407B	; 0x80407b <RxBufferWriteIndex>
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	e1 58       	subi	r30, 0x81	; 129
 1aa:	ff 4b       	sbci	r31, 0xBF	; 191
 1ac:	10 82       	st	Z, r1
			CmdReceived = true;
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	80 93 76 40 	sts	0x4076, r24	; 0x804076 <__data_end>
			RxBufferCnt = 0; RxBufferWriteIndex = 0;
 1b4:	10 92 7a 40 	sts	0x407A, r1	; 0x80407a <RxBufferCnt>
 1b8:	10 92 7b 40 	sts	0x407B, r1	; 0x80407b <RxBufferWriteIndex>
 1bc:	03 c0       	rjmp	.+6      	; 0x1c4 <__vector_53+0x7e>
		} else RxBufferWriteIndex++;
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 7b 40 	sts	0x407B, r24	; 0x80407b <RxBufferWriteIndex>
	}
}
 1c4:	ff 91       	pop	r31
 1c6:	ef 91       	pop	r30
 1c8:	9f 91       	pop	r25
 1ca:	8f 91       	pop	r24
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0b be       	out	0x3b, r0	; 59
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <__vector_54>:

ISR(USART3_DRE_vect)
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	0b b6       	in	r0, 0x3b	; 59
 1e8:	0f 92       	push	r0
 1ea:	8f 93       	push	r24
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	while((TxBufferCnt) && (USART3_STATUS & USART_DREIF_bm))	//Zapisujemy a¿ skoñczy siê miejsce w buforze
 1f0:	80 91 77 40 	lds	r24, 0x4077	; 0x804077 <TxBufferCnt>
 1f4:	88 23       	and	r24, r24
 1f6:	b1 f0       	breq	.+44     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 1f8:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7e0864>
 1fc:	85 ff       	sbrs	r24, 5
 1fe:	12 c0       	rjmp	.+36     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
	{															//lub zabraknie danych do nadania
		USART3_TXDATAL = TxBuffer[TxBufferReadIndex++];
 200:	e0 91 78 40 	lds	r30, 0x4078	; 0x804078 <TxBufferReadIndex>
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	8e 0f       	add	r24, r30
 208:	80 93 78 40 	sts	0x4078, r24	; 0x804078 <TxBufferReadIndex>
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	e0 58       	subi	r30, 0x80	; 128
 210:	fe 4b       	sbci	r31, 0xBE	; 190
 212:	80 81       	ld	r24, Z
 214:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7e0862>
		TxBufferReadIndex%=sizeof(TxBuffer);
		TxBufferCnt--;		
 218:	80 91 77 40 	lds	r24, 0x4077	; 0x804077 <TxBufferCnt>
 21c:	81 50       	subi	r24, 0x01	; 1
 21e:	80 93 77 40 	sts	0x4077, r24	; 0x804077 <TxBufferCnt>
 222:	e6 cf       	rjmp	.-52     	; 0x1f0 <__vector_54+0x14>
	}
	if(TxBufferCnt == 0) USART3_CTRLA &= ~USART_DREIF_bm;		//nie ma nic do nadania, wiêc blokujemy przerwanie
 224:	80 91 77 40 	lds	r24, 0x4077	; 0x804077 <TxBufferCnt>
 228:	81 11       	cpse	r24, r1
 22a:	05 c0       	rjmp	.+10     	; 0x236 <__EEPROM_REGION_LENGTH__+0x36>
 22c:	80 91 65 08 	lds	r24, 0x0865	; 0x800865 <__TEXT_REGION_LENGTH__+0x7e0865>
 230:	8f 7d       	andi	r24, 0xDF	; 223
 232:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <__TEXT_REGION_LENGTH__+0x7e0865>
}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	8f 91       	pop	r24
 23c:	0f 90       	pop	r0
 23e:	0b be       	out	0x3b, r0	; 59
 240:	0f 90       	pop	r0
 242:	0f be       	out	0x3f, r0	; 63
 244:	0f 90       	pop	r0
 246:	1f 90       	pop	r1
 248:	18 95       	reti

0000024a <UART_Init>:

void UART_Init()
{
	TxBufferWriteIndex = 0; TxBufferReadIndex = 0; TxBufferCnt = 0; TxIntEn = false;
 24a:	10 92 79 40 	sts	0x4079, r1	; 0x804079 <TxBufferWriteIndex>
 24e:	10 92 78 40 	sts	0x4078, r1	; 0x804078 <TxBufferReadIndex>
 252:	10 92 77 40 	sts	0x4077, r1	; 0x804077 <TxBufferCnt>
 256:	10 92 81 42 	sts	0x4281, r1	; 0x804281 <TxIntEn>
	RxBufferWriteIndex = 0; RxBufReadIndex = 0; RxBufferCnt = 0;
 25a:	10 92 7b 40 	sts	0x407B, r1	; 0x80407b <RxBufferWriteIndex>
 25e:	10 92 7c 40 	sts	0x407C, r1	; 0x80407c <RxBufReadIndex>
 262:	10 92 7a 40 	sts	0x407A, r1	; 0x80407a <RxBufferCnt>
	USART3_BAUD = 64*F_CPU/16/BAUD;
 266:	80 e1       	ldi	r24, 0x10	; 16
 268:	97 e2       	ldi	r25, 0x27	; 39
 26a:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <__TEXT_REGION_LENGTH__+0x7e0868>
 26e:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <__TEXT_REGION_LENGTH__+0x7e0869>
	USART3_CTRLC = USART_CHSIZE_8BIT_gc;	//8 bitów/znak
 272:	83 e0       	ldi	r24, 0x03	; 3
 274:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <__TEXT_REGION_LENGTH__+0x7e0867>
	PORTB_DIRSET = PIN0_bm;					//PB0 - TxD, PB1 - RxD
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
	USART3_CTRLB = USART_RXEN_bm | USART_TXEN_bm;		//W³¹cz nadajnik i odbiornik UART
 27e:	80 ec       	ldi	r24, 0xC0	; 192
 280:	80 93 66 08 	sts	0x0866, r24	; 0x800866 <__TEXT_REGION_LENGTH__+0x7e0866>
	USART3_CTRLA = USART_RXCIE_bm;		//Odblokuj przerwania odbiornika, nadajnika DRE odblokujemy jak bêdzie potrzebne
 284:	80 e8       	ldi	r24, 0x80	; 128
 286:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <__TEXT_REGION_LENGTH__+0x7e0865>
 28a:	08 95       	ret

0000028c <USART_SendCh>:
}

void USART_SendCh(uint8_t ch)
{
	TxBuffer[TxBufferWriteIndex++] = ch;
 28c:	e0 91 79 40 	lds	r30, 0x4079	; 0x804079 <TxBufferWriteIndex>
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	9e 0f       	add	r25, r30
 294:	90 93 79 40 	sts	0x4079, r25	; 0x804079 <TxBufferWriteIndex>
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	e0 58       	subi	r30, 0x80	; 128
 29c:	fe 4b       	sbci	r31, 0xBE	; 190
 29e:	80 83       	st	Z, r24
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2a0:	f8 94       	cli
	TxBufferWriteIndex %= sizeof(TxBuffer);
	ATOMIC_BLOCK(ATOMIC_FORCEON) TxBufferCnt++;
 2a2:	80 91 77 40 	lds	r24, 0x4077	; 0x804077 <TxBufferCnt>
 2a6:	8f 5f       	subi	r24, 0xFF	; 255
 2a8:	80 93 77 40 	sts	0x4077, r24	; 0x804077 <TxBufferCnt>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 2ac:	78 94       	sei
	USART3_CTRLA |= USART_DREIE_bm;			//Odblokuj przerwanie DRE
 2ae:	e5 e6       	ldi	r30, 0x65	; 101
 2b0:	f8 e0       	ldi	r31, 0x08	; 8
 2b2:	80 81       	ld	r24, Z
 2b4:	80 62       	ori	r24, 0x20	; 32
 2b6:	80 83       	st	Z, r24
 2b8:	08 95       	ret

000002ba <USART_SendText>:
}

void USART_SendText(const char *text)
{
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	ec 01       	movw	r28, r24
 2c4:	8e 01       	movw	r16, r28
	do{
		if(*text) USART_SendCh(*text);	//Wyœlij znak
 2c6:	88 81       	ld	r24, Y
 2c8:	81 11       	cpse	r24, r1
 2ca:	0e 94 46 01 	call	0x28c	; 0x28c <USART_SendCh>
 2ce:	21 96       	adiw	r28, 0x01	; 1
	} while(*text++ != 0);				//Pêtla a¿ do napotkania znaku NUL
 2d0:	f8 01       	movw	r30, r16
 2d2:	80 81       	ld	r24, Z
 2d4:	81 11       	cpse	r24, r1
 2d6:	f6 cf       	rjmp	.-20     	; 0x2c4 <USART_SendText+0xa>
}
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	08 95       	ret

000002e2 <GetUInt8Argument>:
_Bool Cmd_SRAM(char *param, char **last);		//Ustaw typ pamiêci SRAM
_Bool Cmd_DRAM(char *param, char **last);		//Ustaw typ pamiêci DRAM

//Funkcja pobiera jeden argument z ci¹gu i zwraca go jako uint8_t, zwraca true jeœli ok, false, jeœli konwersja siê nie powiod³a
_Bool GetUInt8Argument(char *param, char **last, uint8_t *val)
{
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <GetUInt8Argument+0xa>
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
 2f0:	fb 01       	movw	r30, r22
 2f2:	8a 01       	movw	r16, r20
	char* end;
	param=strtok_r(*last, " ,", last);	//Wyszukaj ci¹g rozdzielaj¹cy - pobieramy offset na stronie
 2f4:	ab 01       	movw	r20, r22
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	70 e4       	ldi	r23, 0x40	; 64
 2fa:	80 81       	ld	r24, Z
 2fc:	91 81       	ldd	r25, Z+1	; 0x01
 2fe:	0e 94 9a 03 	call	0x734	; 0x734 <strtok_r>
	if(param == NULL) return false;     //B³¹d
 302:	00 97       	sbiw	r24, 0x00	; 0
 304:	71 f0       	breq	.+28     	; 0x322 <GetUInt8Argument+0x40>

	*val = strtol(param, &end, 0);		//Pobierz offset na programowanej stronie
 306:	40 e0       	ldi	r20, 0x00	; 0
 308:	50 e0       	ldi	r21, 0x00	; 0
 30a:	be 01       	movw	r22, r28
 30c:	6f 5f       	subi	r22, 0xFF	; 255
 30e:	7f 4f       	sbci	r23, 0xFF	; 255
 310:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <strtol>
 314:	f8 01       	movw	r30, r16
 316:	60 83       	st	Z, r22
	if(*end) return false;	//B³¹d
 318:	e9 81       	ldd	r30, Y+1	; 0x01
 31a:	fa 81       	ldd	r31, Y+2	; 0x02
 31c:	81 e0       	ldi	r24, 0x01	; 1
 31e:	90 81       	ld	r25, Z
 320:	91 11       	cpse	r25, r1
//Funkcja pobiera jeden argument z ci¹gu i zwraca go jako uint8_t, zwraca true jeœli ok, false, jeœli konwersja siê nie powiod³a
_Bool GetUInt8Argument(char *param, char **last, uint8_t *val)
{
	char* end;
	param=strtok_r(*last, " ,", last);	//Wyszukaj ci¹g rozdzielaj¹cy - pobieramy offset na stronie
	if(param == NULL) return false;     //B³¹d
 322:	80 e0       	ldi	r24, 0x00	; 0

	*val = strtol(param, &end, 0);		//Pobierz offset na programowanej stronie
	if(*end) return false;	//B³¹d
	return true;
}
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	08 95       	ret

00000332 <Cmd_A>:

_Bool Cmd_A(char *param, char **last)			//Ustaw liczbê linii adresowych
{
 332:	cf 93       	push	r28
	if(GetUInt8Argument(param, last, &AddrNo) == false)
 334:	40 e8       	ldi	r20, 0x80	; 128
 336:	52 e4       	ldi	r21, 0x42	; 66
 338:	0e 94 71 01 	call	0x2e2	; 0x2e2 <GetUInt8Argument>
 33c:	c8 2f       	mov	r28, r24
 33e:	81 11       	cpse	r24, r1
 340:	05 c0       	rjmp	.+10     	; 0x34c <Cmd_A+0x1a>
	{
		USART_SendText(msg_InvalidArgument);
 342:	88 e4       	ldi	r24, 0x48	; 72
 344:	90 e4       	ldi	r25, 0x40	; 64
 346:	0e 94 5d 01 	call	0x2ba	; 0x2ba <USART_SendText>
		return false;
 34a:	0a c0       	rjmp	.+20     	; 0x360 <Cmd_A+0x2e>
	}
	if((AddrNo < 1) || (AddrNo > 20))
 34c:	80 91 80 42 	lds	r24, 0x4280	; 0x804280 <AddrNo>
 350:	81 50       	subi	r24, 0x01	; 1
 352:	84 31       	cpi	r24, 0x14	; 20
 354:	28 f0       	brcs	.+10     	; 0x360 <Cmd_A+0x2e>
	{
		USART_SendText(mgs_OutOfRange);	
 356:	80 e3       	ldi	r24, 0x30	; 48
 358:	90 e4       	ldi	r25, 0x40	; 64
 35a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <USART_SendText>
		return false;
 35e:	c0 e0       	ldi	r28, 0x00	; 0
	}
	return true;
}
 360:	8c 2f       	mov	r24, r28
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <Cmd_D>:

_Bool Cmd_D(char *param, char **last)			//Ustaw liczbê linii danych
{
 366:	cf 93       	push	r28
	if(GetUInt8Argument(param, last, &DataNo) == false) 
 368:	4e e7       	ldi	r20, 0x7E	; 126
 36a:	50 e4       	ldi	r21, 0x40	; 64
 36c:	0e 94 71 01 	call	0x2e2	; 0x2e2 <GetUInt8Argument>
 370:	c8 2f       	mov	r28, r24
 372:	81 11       	cpse	r24, r1
 374:	05 c0       	rjmp	.+10     	; 0x380 <Cmd_D+0x1a>
	{
		USART_SendText(msg_InvalidArgument);		
 376:	88 e4       	ldi	r24, 0x48	; 72
 378:	90 e4       	ldi	r25, 0x40	; 64
 37a:	0e 94 5d 01 	call	0x2ba	; 0x2ba <USART_SendText>
		return false;
 37e:	0a c0       	rjmp	.+20     	; 0x394 <Cmd_D+0x2e>
	}
	if((DataNo < 1) || (DataNo > 8))
 380:	80 91 7e 40 	lds	r24, 0x407E	; 0x80407e <DataNo>
 384:	81 50       	subi	r24, 0x01	; 1
 386:	88 30       	cpi	r24, 0x08	; 8
 388:	28 f0       	brcs	.+10     	; 0x394 <Cmd_D+0x2e>
	{
		USART_SendText(mgs_OutOfRange);
 38a:	80 e3       	ldi	r24, 0x30	; 48
 38c:	90 e4       	ldi	r25, 0x40	; 64
 38e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <USART_SendText>
		return false;
 392:	c0 e0       	ldi	r28, 0x00	; 0
	}
	return true;
}
 394:	8c 2f       	mov	r24, r28
 396:	cf 91       	pop	r28
 398:	08 95       	ret

0000039a <Cmd_RAS>:

_Bool Cmd_RAS(char *param, char **last)			//Ustaw liczbê linii adresowych dla sygna³u RAS
{
 39a:	cf 93       	push	r28
	if(GetUInt8Argument(param, last, &RASNo) == false)
 39c:	4d e7       	ldi	r20, 0x7D	; 125
 39e:	50 e4       	ldi	r21, 0x40	; 64
 3a0:	0e 94 71 01 	call	0x2e2	; 0x2e2 <GetUInt8Argument>
 3a4:	c8 2f       	mov	r28, r24
 3a6:	81 11       	cpse	r24, r1
 3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <Cmd_RAS+0x1a>
	{
		USART_SendText(msg_InvalidArgument);
 3aa:	88 e4       	ldi	r24, 0x48	; 72
 3ac:	90 e4       	ldi	r25, 0x40	; 64
 3ae:	0e 94 5d 01 	call	0x2ba	; 0x2ba <USART_SendText>
		return false;
 3b2:	09 c0       	rjmp	.+18     	; 0x3c6 <Cmd_RAS+0x2c>
	}
	if(RASNo > 8) 
 3b4:	80 91 7d 40 	lds	r24, 0x407D	; 0x80407d <RASNo>
 3b8:	89 30       	cpi	r24, 0x09	; 9
 3ba:	28 f0       	brcs	.+10     	; 0x3c6 <Cmd_RAS+0x2c>
	{
		USART_SendText(mgs_OutOfRange);
 3bc:	80 e3       	ldi	r24, 0x30	; 48
 3be:	90 e4       	ldi	r25, 0x40	; 64
 3c0:	0e 94 5d 01 	call	0x2ba	; 0x2ba <USART_SendText>
		return false;
 3c4:	c0 e0       	ldi	r28, 0x00	; 0
	}
	return true;
}	
 3c6:	8c 2f       	mov	r24, r28
 3c8:	cf 91       	pop	r28
 3ca:	08 95       	ret

000003cc <InterpretCommand>:
const Command Polecenia[]={{PGM_STR("-SRAM"), Cmd_SRAM}, {PGM_STR("-DRAM"), Cmd_DRAM},
						   {PGM_STR("-A"), Cmd_A}, {PGM_STR("-D"), Cmd_D}, {PGM_STR("-RAS"), Cmd_RAS}};


void InterpretCommand(char *cmdline)
{
 3cc:	cf 92       	push	r12
 3ce:	df 92       	push	r13
 3d0:	ef 92       	push	r14
 3d2:	ff 92       	push	r15
 3d4:	0f 93       	push	r16
 3d6:	1f 93       	push	r17
 3d8:	cf 93       	push	r28
 3da:	df 93       	push	r29
 3dc:	00 d0       	rcall	.+0      	; 0x3de <InterpretCommand+0x12>
 3de:	cd b7       	in	r28, 0x3d	; 61
 3e0:	de b7       	in	r29, 0x3e	; 62
	_Bool retVal = false;
	uint8_t indeks;
	char *last = cmdline;
 3e2:	89 83       	std	Y+1, r24	; 0x01
 3e4:	9a 83       	std	Y+2, r25	; 0x02
						   {PGM_STR("-A"), Cmd_A}, {PGM_STR("-D"), Cmd_D}, {PGM_STR("-RAS"), Cmd_RAS}};


void InterpretCommand(char *cmdline)
{
	_Bool retVal = false;
 3e6:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t indeks;
	char *last = cmdline;
	uint8_t max_indeks=sizeof(Polecenia)/sizeof(Polecenia[0]);
	char *cmd;
	do{	
		cmd = strtok_r(last, " ", &last); //Wydziel polecenie z przekazanej linii
 3e8:	ae 01       	movw	r20, r28
 3ea:	4f 5f       	subi	r20, 0xFF	; 255
 3ec:	5f 4f       	sbci	r21, 0xFF	; 255
 3ee:	63 e0       	ldi	r22, 0x03	; 3
 3f0:	70 e4       	ldi	r23, 0x40	; 64
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	9a 81       	ldd	r25, Y+2	; 0x02
 3f6:	0e 94 9a 03 	call	0x734	; 0x734 <strtok_r>
 3fa:	7c 01       	movw	r14, r24
		if(cmd != NULL) 		//Jeœli znaleziono poprawny format polecenia, to spróbujmy je wykonaæ
 3fc:	89 2b       	or	r24, r25
 3fe:	91 f1       	breq	.+100    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
 400:	95 e0       	ldi	r25, 0x05	; 5
 402:	c9 2e       	mov	r12, r25
 404:	90 e4       	ldi	r25, 0x40	; 64
 406:	d9 2e       	mov	r13, r25
 408:	00 e0       	ldi	r16, 0x00	; 0
 40a:	10 e0       	ldi	r17, 0x00	; 0
		{
			for(indeks = 0; indeks < max_indeks; indeks++)
			{
				if(strcmp(cmd, Polecenia[indeks].cmd) == 0) //Przeszukaj listê poleceñ
 40c:	f6 01       	movw	r30, r12
 40e:	60 81       	ld	r22, Z
 410:	71 81       	ldd	r23, Z+1	; 0x01
 412:	c7 01       	movw	r24, r14
 414:	0e 94 91 03 	call	0x722	; 0x722 <strcmp>
 418:	89 2b       	or	r24, r25
 41a:	a1 f4       	brne	.+40     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
				{
					retVal = Polecenia[indeks].Handler(last, &last);   //Wywo³aj funkcjê obs³ugi przes³anego polecenia
 41c:	00 0f       	add	r16, r16
 41e:	11 1f       	adc	r17, r17
 420:	00 0f       	add	r16, r16
 422:	11 1f       	adc	r17, r17
 424:	f8 01       	movw	r30, r16
 426:	eb 5f       	subi	r30, 0xFB	; 251
 428:	ff 4b       	sbci	r31, 0xBF	; 191
 42a:	02 80       	ldd	r0, Z+2	; 0x02
 42c:	f3 81       	ldd	r31, Z+3	; 0x03
 42e:	e0 2d       	mov	r30, r0
 430:	be 01       	movw	r22, r28
 432:	6f 5f       	subi	r22, 0xFF	; 255
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	89 81       	ldd	r24, Y+1	; 0x01
 438:	9a 81       	ldd	r25, Y+2	; 0x02
 43a:	09 95       	icall
 43c:	18 2f       	mov	r17, r24
		{
			USART_SendText(cmd);			//Wyœlij polecenie, które spowodowa³o b³¹d
			USART_SendText(msg_UnknownCmd); //B³¹d - nieznane polecenie
			break;
		}
	} while((cmd) && (retVal));
 43e:	81 11       	cpse	r24, r1
 440:	d3 cf       	rjmp	.-90     	; 0x3e8 <InterpretCommand+0x1c>
 442:	15 c0       	rjmp	.+42     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 444:	0f 5f       	subi	r16, 0xFF	; 255
 446:	1f 4f       	sbci	r17, 0xFF	; 255
 448:	f4 e0       	ldi	r31, 0x04	; 4
 44a:	cf 0e       	add	r12, r31
 44c:	d1 1c       	adc	r13, r1
	char *cmd;
	do{	
		cmd = strtok_r(last, " ", &last); //Wydziel polecenie z przekazanej linii
		if(cmd != NULL) 		//Jeœli znaleziono poprawny format polecenia, to spróbujmy je wykonaæ
		{
			for(indeks = 0; indeks < max_indeks; indeks++)
 44e:	05 30       	cpi	r16, 0x05	; 5
 450:	11 05       	cpc	r17, r1
 452:	e1 f6       	brne	.-72     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
				}
			}
		}
		if(indeks == max_indeks)  //Jeœli polecenie nieznane lub b³¹d...
		{
			USART_SendText(cmd);			//Wyœlij polecenie, które spowodowa³o b³¹d
 454:	c7 01       	movw	r24, r14
 456:	0e 94 5d 01 	call	0x2ba	; 0x2ba <USART_SendText>
			USART_SendText(msg_UnknownCmd); //B³¹d - nieznane polecenie
 45a:	8b e5       	ldi	r24, 0x5B	; 91
 45c:	90 e4       	ldi	r25, 0x40	; 64
 45e:	0e 94 5d 01 	call	0x2ba	; 0x2ba <USART_SendText>
 462:	05 c0       	rjmp	.+10     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
			break;
		}
	} while((cmd) && (retVal));
	if((cmd == NULL) && (retVal == true)) USART_SendText(msg_OK);
 464:	11 23       	and	r17, r17
 466:	19 f0       	breq	.+6      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 468:	80 e7       	ldi	r24, 0x70	; 112
 46a:	90 e4       	ldi	r25, 0x40	; 64
 46c:	f8 cf       	rjmp	.-16     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
}
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	df 91       	pop	r29
 474:	cf 91       	pop	r28
 476:	1f 91       	pop	r17
 478:	0f 91       	pop	r16
 47a:	ff 90       	pop	r15
 47c:	ef 90       	pop	r14
 47e:	df 90       	pop	r13
 480:	cf 90       	pop	r12
 482:	08 95       	ret

00000484 <main>:

int main(void)
{
	//Domyœlnie MCU startuje z wew. zegarem 4 MHz
	CPU_CCP = CCP_IOREG_gc;							//Odblokuj dostêp do rejestru chronionego
 484:	88 ed       	ldi	r24, 0xD8	; 216
 486:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSCHFCTRLA = CLKCTRL_FRQSEL_24M_gc;		//Zegar 24 MHz
 488:	84 e2       	ldi	r24, 0x24	; 36
 48a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    
	UART_Init();				//Inicjalizacja USART
 48e:	0e 94 25 01 	call	0x24a	; 0x24a <UART_Init>
	sei();						//Odblokowjemy przerwania
 492:	78 94       	sei
	
	PORTB_DIRSET = PIN3_bm;		//Pin steruj¹cy LEDem
 494:	88 e0       	ldi	r24, 0x08	; 8
 496:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>

    while (1) 
    {
		if(CmdReceived)
 49a:	80 91 76 40 	lds	r24, 0x4076	; 0x804076 <__data_end>
 49e:	88 23       	and	r24, r24
 4a0:	e1 f3       	breq	.-8      	; 0x49a <main+0x16>
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 4a2:	f8 94       	cli
		{
			ATOMIC_BLOCK(ATOMIC_FORCEON) CmdReceived = false;
 4a4:	10 92 76 40 	sts	0x4076, r1	; 0x804076 <__data_end>
    return 1;
}

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    sei();
 4a8:	78 94       	sei
			InterpretCommand(RxBuffer);			//Zdekoduj przes³ane polecenie
 4aa:	8f e7       	ldi	r24, 0x7F	; 127
 4ac:	90 e4       	ldi	r25, 0x40	; 64
 4ae:	0e 94 e6 01 	call	0x3cc	; 0x3cc <InterpretCommand>
 4b2:	f3 cf       	rjmp	.-26     	; 0x49a <main+0x16>

000004b4 <strtol>:
 4b4:	3f 92       	push	r3
 4b6:	4f 92       	push	r4
 4b8:	5f 92       	push	r5
 4ba:	6f 92       	push	r6
 4bc:	7f 92       	push	r7
 4be:	8f 92       	push	r8
 4c0:	9f 92       	push	r9
 4c2:	af 92       	push	r10
 4c4:	bf 92       	push	r11
 4c6:	cf 92       	push	r12
 4c8:	df 92       	push	r13
 4ca:	ef 92       	push	r14
 4cc:	ff 92       	push	r15
 4ce:	0f 93       	push	r16
 4d0:	1f 93       	push	r17
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	5c 01       	movw	r10, r24
 4d8:	6b 01       	movw	r12, r22
 4da:	7a 01       	movw	r14, r20
 4dc:	61 15       	cp	r22, r1
 4de:	71 05       	cpc	r23, r1
 4e0:	19 f0       	breq	.+6      	; 0x4e8 <strtol+0x34>
 4e2:	fb 01       	movw	r30, r22
 4e4:	80 83       	st	Z, r24
 4e6:	91 83       	std	Z+1, r25	; 0x01
 4e8:	e1 14       	cp	r14, r1
 4ea:	f1 04       	cpc	r15, r1
 4ec:	29 f0       	breq	.+10     	; 0x4f8 <strtol+0x44>
 4ee:	c7 01       	movw	r24, r14
 4f0:	02 97       	sbiw	r24, 0x02	; 2
 4f2:	83 97       	sbiw	r24, 0x23	; 35
 4f4:	08 f0       	brcs	.+2      	; 0x4f8 <strtol+0x44>
 4f6:	e5 c0       	rjmp	.+458    	; 0x6c2 <strtol+0x20e>
 4f8:	e5 01       	movw	r28, r10
 4fa:	21 96       	adiw	r28, 0x01	; 1
 4fc:	f5 01       	movw	r30, r10
 4fe:	10 81       	ld	r17, Z
 500:	81 2f       	mov	r24, r17
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 88 03 	call	0x710	; 0x710 <isspace>
 508:	89 2b       	or	r24, r25
 50a:	11 f0       	breq	.+4      	; 0x510 <strtol+0x5c>
 50c:	5e 01       	movw	r10, r28
 50e:	f4 cf       	rjmp	.-24     	; 0x4f8 <strtol+0x44>
 510:	1d 32       	cpi	r17, 0x2D	; 45
 512:	29 f4       	brne	.+10     	; 0x51e <strtol+0x6a>
 514:	21 96       	adiw	r28, 0x01	; 1
 516:	f5 01       	movw	r30, r10
 518:	11 81       	ldd	r17, Z+1	; 0x01
 51a:	01 e0       	ldi	r16, 0x01	; 1
 51c:	07 c0       	rjmp	.+14     	; 0x52c <strtol+0x78>
 51e:	1b 32       	cpi	r17, 0x2B	; 43
 520:	21 f4       	brne	.+8      	; 0x52a <strtol+0x76>
 522:	e5 01       	movw	r28, r10
 524:	22 96       	adiw	r28, 0x02	; 2
 526:	f5 01       	movw	r30, r10
 528:	11 81       	ldd	r17, Z+1	; 0x01
 52a:	00 e0       	ldi	r16, 0x00	; 0
 52c:	e1 14       	cp	r14, r1
 52e:	f1 04       	cpc	r15, r1
 530:	09 f1       	breq	.+66     	; 0x574 <strtol+0xc0>
 532:	f0 e1       	ldi	r31, 0x10	; 16
 534:	ef 16       	cp	r14, r31
 536:	f1 04       	cpc	r15, r1
 538:	29 f4       	brne	.+10     	; 0x544 <strtol+0x90>
 53a:	3f c0       	rjmp	.+126    	; 0x5ba <strtol+0x106>
 53c:	10 e3       	ldi	r17, 0x30	; 48
 53e:	e1 14       	cp	r14, r1
 540:	f1 04       	cpc	r15, r1
 542:	21 f1       	breq	.+72     	; 0x58c <strtol+0xd8>
 544:	28 e0       	ldi	r18, 0x08	; 8
 546:	e2 16       	cp	r14, r18
 548:	f1 04       	cpc	r15, r1
 54a:	01 f1       	breq	.+64     	; 0x58c <strtol+0xd8>
 54c:	54 f4       	brge	.+20     	; 0x562 <strtol+0xae>
 54e:	e2 e0       	ldi	r30, 0x02	; 2
 550:	ee 16       	cp	r14, r30
 552:	f1 04       	cpc	r15, r1
 554:	21 f5       	brne	.+72     	; 0x59e <strtol+0xea>
 556:	81 2c       	mov	r8, r1
 558:	91 2c       	mov	r9, r1
 55a:	a1 2c       	mov	r10, r1
 55c:	b0 e4       	ldi	r27, 0x40	; 64
 55e:	bb 2e       	mov	r11, r27
 560:	3e c0       	rjmp	.+124    	; 0x5de <strtol+0x12a>
 562:	fa e0       	ldi	r31, 0x0A	; 10
 564:	ef 16       	cp	r14, r31
 566:	f1 04       	cpc	r15, r1
 568:	39 f0       	breq	.+14     	; 0x578 <strtol+0xc4>
 56a:	20 e1       	ldi	r18, 0x10	; 16
 56c:	e2 16       	cp	r14, r18
 56e:	f1 04       	cpc	r15, r1
 570:	b1 f4       	brne	.+44     	; 0x59e <strtol+0xea>
 572:	30 c0       	rjmp	.+96     	; 0x5d4 <strtol+0x120>
 574:	10 33       	cpi	r17, 0x30	; 48
 576:	19 f1       	breq	.+70     	; 0x5be <strtol+0x10a>
 578:	fa e0       	ldi	r31, 0x0A	; 10
 57a:	ef 2e       	mov	r14, r31
 57c:	f1 2c       	mov	r15, r1
 57e:	ac ec       	ldi	r26, 0xCC	; 204
 580:	8a 2e       	mov	r8, r26
 582:	98 2c       	mov	r9, r8
 584:	a8 2c       	mov	r10, r8
 586:	ac e0       	ldi	r26, 0x0C	; 12
 588:	ba 2e       	mov	r11, r26
 58a:	29 c0       	rjmp	.+82     	; 0x5de <strtol+0x12a>
 58c:	78 e0       	ldi	r23, 0x08	; 8
 58e:	e7 2e       	mov	r14, r23
 590:	f1 2c       	mov	r15, r1
 592:	81 2c       	mov	r8, r1
 594:	91 2c       	mov	r9, r1
 596:	a1 2c       	mov	r10, r1
 598:	e0 e1       	ldi	r30, 0x10	; 16
 59a:	be 2e       	mov	r11, r30
 59c:	20 c0       	rjmp	.+64     	; 0x5de <strtol+0x12a>
 59e:	60 e0       	ldi	r22, 0x00	; 0
 5a0:	70 e0       	ldi	r23, 0x00	; 0
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	90 e8       	ldi	r25, 0x80	; 128
 5a6:	97 01       	movw	r18, r14
 5a8:	0f 2c       	mov	r0, r15
 5aa:	00 0c       	add	r0, r0
 5ac:	44 0b       	sbc	r20, r20
 5ae:	55 0b       	sbc	r21, r21
 5b0:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <__udivmodsi4>
 5b4:	49 01       	movw	r8, r18
 5b6:	5a 01       	movw	r10, r20
 5b8:	12 c0       	rjmp	.+36     	; 0x5de <strtol+0x12a>
 5ba:	10 33       	cpi	r17, 0x30	; 48
 5bc:	59 f4       	brne	.+22     	; 0x5d4 <strtol+0x120>
 5be:	88 81       	ld	r24, Y
 5c0:	8f 7d       	andi	r24, 0xDF	; 223
 5c2:	88 35       	cpi	r24, 0x58	; 88
 5c4:	09 f0       	breq	.+2      	; 0x5c8 <strtol+0x114>
 5c6:	ba cf       	rjmp	.-140    	; 0x53c <strtol+0x88>
 5c8:	19 81       	ldd	r17, Y+1	; 0x01
 5ca:	22 96       	adiw	r28, 0x02	; 2
 5cc:	02 60       	ori	r16, 0x02	; 2
 5ce:	80 e1       	ldi	r24, 0x10	; 16
 5d0:	e8 2e       	mov	r14, r24
 5d2:	f1 2c       	mov	r15, r1
 5d4:	81 2c       	mov	r8, r1
 5d6:	91 2c       	mov	r9, r1
 5d8:	a1 2c       	mov	r10, r1
 5da:	68 e0       	ldi	r22, 0x08	; 8
 5dc:	b6 2e       	mov	r11, r22
 5de:	40 e0       	ldi	r20, 0x00	; 0
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	70 e0       	ldi	r23, 0x00	; 0
 5e4:	cb 01       	movw	r24, r22
 5e6:	27 01       	movw	r4, r14
 5e8:	0f 2c       	mov	r0, r15
 5ea:	00 0c       	add	r0, r0
 5ec:	66 08       	sbc	r6, r6
 5ee:	77 08       	sbc	r7, r7
 5f0:	fe 01       	movw	r30, r28
 5f2:	50 ed       	ldi	r21, 0xD0	; 208
 5f4:	35 2e       	mov	r3, r21
 5f6:	31 0e       	add	r3, r17
 5f8:	29 e0       	ldi	r18, 0x09	; 9
 5fa:	23 15       	cp	r18, r3
 5fc:	70 f4       	brcc	.+28     	; 0x61a <strtol+0x166>
 5fe:	2f eb       	ldi	r18, 0xBF	; 191
 600:	21 0f       	add	r18, r17
 602:	2a 31       	cpi	r18, 0x1A	; 26
 604:	18 f4       	brcc	.+6      	; 0x60c <strtol+0x158>
 606:	39 ec       	ldi	r19, 0xC9	; 201
 608:	33 2e       	mov	r3, r19
 60a:	06 c0       	rjmp	.+12     	; 0x618 <strtol+0x164>
 60c:	2f e9       	ldi	r18, 0x9F	; 159
 60e:	21 0f       	add	r18, r17
 610:	2a 31       	cpi	r18, 0x1A	; 26
 612:	18 f5       	brcc	.+70     	; 0x65a <strtol+0x1a6>
 614:	29 ea       	ldi	r18, 0xA9	; 169
 616:	32 2e       	mov	r3, r18
 618:	31 0e       	add	r3, r17
 61a:	23 2d       	mov	r18, r3
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	2e 15       	cp	r18, r14
 620:	3f 05       	cpc	r19, r15
 622:	dc f4       	brge	.+54     	; 0x65a <strtol+0x1a6>
 624:	47 fd       	sbrc	r20, 7
 626:	16 c0       	rjmp	.+44     	; 0x654 <strtol+0x1a0>
 628:	86 16       	cp	r8, r22
 62a:	97 06       	cpc	r9, r23
 62c:	a8 06       	cpc	r10, r24
 62e:	b9 06       	cpc	r11, r25
 630:	70 f0       	brcs	.+28     	; 0x64e <strtol+0x19a>
 632:	a3 01       	movw	r20, r6
 634:	92 01       	movw	r18, r4
 636:	0e 94 c4 03 	call	0x788	; 0x788 <__mulsi3>
 63a:	63 0d       	add	r22, r3
 63c:	71 1d       	adc	r23, r1
 63e:	81 1d       	adc	r24, r1
 640:	91 1d       	adc	r25, r1
 642:	61 30       	cpi	r22, 0x01	; 1
 644:	71 05       	cpc	r23, r1
 646:	81 05       	cpc	r24, r1
 648:	20 e8       	ldi	r18, 0x80	; 128
 64a:	92 07       	cpc	r25, r18
 64c:	10 f0       	brcs	.+4      	; 0x652 <strtol+0x19e>
 64e:	4f ef       	ldi	r20, 0xFF	; 255
 650:	01 c0       	rjmp	.+2      	; 0x654 <strtol+0x1a0>
 652:	41 e0       	ldi	r20, 0x01	; 1
 654:	21 96       	adiw	r28, 0x01	; 1
 656:	10 81       	ld	r17, Z
 658:	cb cf       	rjmp	.-106    	; 0x5f0 <strtol+0x13c>
 65a:	20 2f       	mov	r18, r16
 65c:	21 70       	andi	r18, 0x01	; 1
 65e:	c1 14       	cp	r12, r1
 660:	d1 04       	cpc	r13, r1
 662:	71 f0       	breq	.+28     	; 0x680 <strtol+0x1cc>
 664:	44 23       	and	r20, r20
 666:	29 f0       	breq	.+10     	; 0x672 <strtol+0x1be>
 668:	21 97       	sbiw	r28, 0x01	; 1
 66a:	f6 01       	movw	r30, r12
 66c:	c0 83       	st	Z, r28
 66e:	d1 83       	std	Z+1, r29	; 0x01
 670:	07 c0       	rjmp	.+14     	; 0x680 <strtol+0x1cc>
 672:	01 ff       	sbrs	r16, 1
 674:	19 c0       	rjmp	.+50     	; 0x6a8 <strtol+0x1f4>
 676:	22 97       	sbiw	r28, 0x02	; 2
 678:	f6 01       	movw	r30, r12
 67a:	c0 83       	st	Z, r28
 67c:	d1 83       	std	Z+1, r29	; 0x01
 67e:	14 c0       	rjmp	.+40     	; 0x6a8 <strtol+0x1f4>
 680:	47 ff       	sbrs	r20, 7
 682:	12 c0       	rjmp	.+36     	; 0x6a8 <strtol+0x1f4>
 684:	22 23       	and	r18, r18
 686:	29 f0       	breq	.+10     	; 0x692 <strtol+0x1de>
 688:	60 e0       	ldi	r22, 0x00	; 0
 68a:	70 e0       	ldi	r23, 0x00	; 0
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	90 e8       	ldi	r25, 0x80	; 128
 690:	04 c0       	rjmp	.+8      	; 0x69a <strtol+0x1e6>
 692:	6f ef       	ldi	r22, 0xFF	; 255
 694:	7f ef       	ldi	r23, 0xFF	; 255
 696:	8f ef       	ldi	r24, 0xFF	; 255
 698:	9f e7       	ldi	r25, 0x7F	; 127
 69a:	22 e2       	ldi	r18, 0x22	; 34
 69c:	30 e0       	ldi	r19, 0x00	; 0
 69e:	20 93 82 42 	sts	0x4282, r18	; 0x804282 <errno>
 6a2:	30 93 83 42 	sts	0x4283, r19	; 0x804283 <errno+0x1>
 6a6:	09 c0       	rjmp	.+18     	; 0x6ba <strtol+0x206>
 6a8:	22 23       	and	r18, r18
 6aa:	81 f0       	breq	.+32     	; 0x6cc <strtol+0x218>
 6ac:	90 95       	com	r25
 6ae:	80 95       	com	r24
 6b0:	70 95       	com	r23
 6b2:	61 95       	neg	r22
 6b4:	7f 4f       	sbci	r23, 0xFF	; 255
 6b6:	8f 4f       	sbci	r24, 0xFF	; 255
 6b8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ba:	46 2f       	mov	r20, r22
 6bc:	37 2f       	mov	r19, r23
 6be:	28 2f       	mov	r18, r24
 6c0:	12 c0       	rjmp	.+36     	; 0x6e6 <strtol+0x232>
 6c2:	40 e0       	ldi	r20, 0x00	; 0
 6c4:	30 e0       	ldi	r19, 0x00	; 0
 6c6:	20 e0       	ldi	r18, 0x00	; 0
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0d c0       	rjmp	.+26     	; 0x6e6 <strtol+0x232>
 6cc:	97 ff       	sbrs	r25, 7
 6ce:	f5 cf       	rjmp	.-22     	; 0x6ba <strtol+0x206>
 6d0:	82 e2       	ldi	r24, 0x22	; 34
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	80 93 82 42 	sts	0x4282, r24	; 0x804282 <errno>
 6d8:	90 93 83 42 	sts	0x4283, r25	; 0x804283 <errno+0x1>
 6dc:	6f ef       	ldi	r22, 0xFF	; 255
 6de:	7f ef       	ldi	r23, 0xFF	; 255
 6e0:	8f ef       	ldi	r24, 0xFF	; 255
 6e2:	9f e7       	ldi	r25, 0x7F	; 127
 6e4:	ea cf       	rjmp	.-44     	; 0x6ba <strtol+0x206>
 6e6:	64 2f       	mov	r22, r20
 6e8:	73 2f       	mov	r23, r19
 6ea:	82 2f       	mov	r24, r18
 6ec:	df 91       	pop	r29
 6ee:	cf 91       	pop	r28
 6f0:	1f 91       	pop	r17
 6f2:	0f 91       	pop	r16
 6f4:	ff 90       	pop	r15
 6f6:	ef 90       	pop	r14
 6f8:	df 90       	pop	r13
 6fa:	cf 90       	pop	r12
 6fc:	bf 90       	pop	r11
 6fe:	af 90       	pop	r10
 700:	9f 90       	pop	r9
 702:	8f 90       	pop	r8
 704:	7f 90       	pop	r7
 706:	6f 90       	pop	r6
 708:	5f 90       	pop	r5
 70a:	4f 90       	pop	r4
 70c:	3f 90       	pop	r3
 70e:	08 95       	ret

00000710 <isspace>:
 710:	91 11       	cpse	r25, r1
 712:	0c 94 c1 03 	jmp	0x782	; 0x782 <__ctype_isfalse>
 716:	80 32       	cpi	r24, 0x20	; 32
 718:	19 f0       	breq	.+6      	; 0x720 <isspace+0x10>
 71a:	89 50       	subi	r24, 0x09	; 9
 71c:	85 50       	subi	r24, 0x05	; 5
 71e:	c8 f7       	brcc	.-14     	; 0x712 <isspace+0x2>
 720:	08 95       	ret

00000722 <strcmp>:
 722:	fb 01       	movw	r30, r22
 724:	dc 01       	movw	r26, r24
 726:	8d 91       	ld	r24, X+
 728:	01 90       	ld	r0, Z+
 72a:	80 19       	sub	r24, r0
 72c:	01 10       	cpse	r0, r1
 72e:	d9 f3       	breq	.-10     	; 0x726 <strcmp+0x4>
 730:	99 0b       	sbc	r25, r25
 732:	08 95       	ret

00000734 <strtok_r>:
 734:	fa 01       	movw	r30, r20
 736:	a1 91       	ld	r26, Z+
 738:	b0 81       	ld	r27, Z
 73a:	00 97       	sbiw	r24, 0x00	; 0
 73c:	19 f4       	brne	.+6      	; 0x744 <strtok_r+0x10>
 73e:	10 97       	sbiw	r26, 0x00	; 0
 740:	e1 f0       	breq	.+56     	; 0x77a <strtok_r+0x46>
 742:	cd 01       	movw	r24, r26
 744:	dc 01       	movw	r26, r24
 746:	cd 01       	movw	r24, r26
 748:	0d 90       	ld	r0, X+
 74a:	00 20       	and	r0, r0
 74c:	11 f4       	brne	.+4      	; 0x752 <strtok_r+0x1e>
 74e:	c0 01       	movw	r24, r0
 750:	13 c0       	rjmp	.+38     	; 0x778 <strtok_r+0x44>
 752:	fb 01       	movw	r30, r22
 754:	21 91       	ld	r18, Z+
 756:	22 23       	and	r18, r18
 758:	19 f0       	breq	.+6      	; 0x760 <strtok_r+0x2c>
 75a:	20 15       	cp	r18, r0
 75c:	d9 f7       	brne	.-10     	; 0x754 <strtok_r+0x20>
 75e:	f3 cf       	rjmp	.-26     	; 0x746 <strtok_r+0x12>
 760:	fb 01       	movw	r30, r22
 762:	21 91       	ld	r18, Z+
 764:	20 15       	cp	r18, r0
 766:	19 f4       	brne	.+6      	; 0x76e <strtok_r+0x3a>
 768:	1e 92       	st	-X, r1
 76a:	11 96       	adiw	r26, 0x01	; 1
 76c:	06 c0       	rjmp	.+12     	; 0x77a <strtok_r+0x46>
 76e:	22 23       	and	r18, r18
 770:	c1 f7       	brne	.-16     	; 0x762 <strtok_r+0x2e>
 772:	0d 90       	ld	r0, X+
 774:	00 20       	and	r0, r0
 776:	a1 f7       	brne	.-24     	; 0x760 <strtok_r+0x2c>
 778:	d0 01       	movw	r26, r0
 77a:	fa 01       	movw	r30, r20
 77c:	a1 93       	st	Z+, r26
 77e:	b0 83       	st	Z, r27
 780:	08 95       	ret

00000782 <__ctype_isfalse>:
 782:	99 27       	eor	r25, r25
 784:	88 27       	eor	r24, r24

00000786 <__ctype_istrue>:
 786:	08 95       	ret

00000788 <__mulsi3>:
 788:	db 01       	movw	r26, r22
 78a:	8f 93       	push	r24
 78c:	9f 93       	push	r25
 78e:	0e 94 f6 03 	call	0x7ec	; 0x7ec <__muluhisi3>
 792:	bf 91       	pop	r27
 794:	af 91       	pop	r26
 796:	a2 9f       	mul	r26, r18
 798:	80 0d       	add	r24, r0
 79a:	91 1d       	adc	r25, r1
 79c:	a3 9f       	mul	r26, r19
 79e:	90 0d       	add	r25, r0
 7a0:	b2 9f       	mul	r27, r18
 7a2:	90 0d       	add	r25, r0
 7a4:	11 24       	eor	r1, r1
 7a6:	08 95       	ret

000007a8 <__udivmodsi4>:
 7a8:	a1 e2       	ldi	r26, 0x21	; 33
 7aa:	1a 2e       	mov	r1, r26
 7ac:	aa 1b       	sub	r26, r26
 7ae:	bb 1b       	sub	r27, r27
 7b0:	fd 01       	movw	r30, r26
 7b2:	0d c0       	rjmp	.+26     	; 0x7ce <__udivmodsi4_ep>

000007b4 <__udivmodsi4_loop>:
 7b4:	aa 1f       	adc	r26, r26
 7b6:	bb 1f       	adc	r27, r27
 7b8:	ee 1f       	adc	r30, r30
 7ba:	ff 1f       	adc	r31, r31
 7bc:	a2 17       	cp	r26, r18
 7be:	b3 07       	cpc	r27, r19
 7c0:	e4 07       	cpc	r30, r20
 7c2:	f5 07       	cpc	r31, r21
 7c4:	20 f0       	brcs	.+8      	; 0x7ce <__udivmodsi4_ep>
 7c6:	a2 1b       	sub	r26, r18
 7c8:	b3 0b       	sbc	r27, r19
 7ca:	e4 0b       	sbc	r30, r20
 7cc:	f5 0b       	sbc	r31, r21

000007ce <__udivmodsi4_ep>:
 7ce:	66 1f       	adc	r22, r22
 7d0:	77 1f       	adc	r23, r23
 7d2:	88 1f       	adc	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	1a 94       	dec	r1
 7d8:	69 f7       	brne	.-38     	; 0x7b4 <__udivmodsi4_loop>
 7da:	60 95       	com	r22
 7dc:	70 95       	com	r23
 7de:	80 95       	com	r24
 7e0:	90 95       	com	r25
 7e2:	9b 01       	movw	r18, r22
 7e4:	ac 01       	movw	r20, r24
 7e6:	bd 01       	movw	r22, r26
 7e8:	cf 01       	movw	r24, r30
 7ea:	08 95       	ret

000007ec <__muluhisi3>:
 7ec:	0e 94 01 04 	call	0x802	; 0x802 <__umulhisi3>
 7f0:	a5 9f       	mul	r26, r21
 7f2:	90 0d       	add	r25, r0
 7f4:	b4 9f       	mul	r27, r20
 7f6:	90 0d       	add	r25, r0
 7f8:	a4 9f       	mul	r26, r20
 7fa:	80 0d       	add	r24, r0
 7fc:	91 1d       	adc	r25, r1
 7fe:	11 24       	eor	r1, r1
 800:	08 95       	ret

00000802 <__umulhisi3>:
 802:	a2 9f       	mul	r26, r18
 804:	b0 01       	movw	r22, r0
 806:	b3 9f       	mul	r27, r19
 808:	c0 01       	movw	r24, r0
 80a:	a3 9f       	mul	r26, r19
 80c:	70 0d       	add	r23, r0
 80e:	81 1d       	adc	r24, r1
 810:	11 24       	eor	r1, r1
 812:	91 1d       	adc	r25, r1
 814:	b2 9f       	mul	r27, r18
 816:	70 0d       	add	r23, r0
 818:	81 1d       	adc	r24, r1
 81a:	11 24       	eor	r1, r1
 81c:	91 1d       	adc	r25, r1
 81e:	08 95       	ret

00000820 <_exit>:
 820:	f8 94       	cli

00000822 <__stop_program>:
 822:	ff cf       	rjmp	.-2      	; 0x822 <__stop_program>
